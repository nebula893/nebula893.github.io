<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ecolorfz&#39;s Blog</title>
  
  <subtitle>好きなことを続けること</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-08T15:45:21.947Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ecolorfz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性扫描寄存器分配</title>
    <link href="http://example.com/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/"/>
    <id>http://example.com/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/</id>
    <published>2022-08-07T15:26:35.000Z</published>
    <updated>2022-08-08T15:45:21.947Z</updated>
    
    <content type="html"><![CDATA[<p>这里所讲的内容主要来自于<a href="#ref-1">[1]</a>，也就是最为基础的线性扫描寄存器分配方案，可以做到线性时间内进行寄存器分配，比起图着色分配是一种快的多的分配方案。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先来介绍最基础的线性扫描分配器，大致分为下面：</p><ol><li>计算出每个虚拟寄存器的活跃区间（Live Interval），根据活跃区间的起点进行排序。</li><li>从前到后进行扫描活跃区间列表。</li><li>进行分配并处理spill。</li></ol><p>下面开始详细说明每个步骤如何进行操作。</p><h3 id="计算活跃区间"><a href="#计算活跃区间" class="headerlink" title="计算活跃区间"></a>计算活跃区间</h3><p>首先对活跃区间进行计算。首先需要对指令进行一个编号，一个简单的方法是对指令进行深度优先标号（Deep First Numbering, DFN）。在进行了编号之后，通过活跃分析（live analysis）确定每个虚拟寄存器在程序的那些位置是活跃的，然后选出编号最大（$j$）和最小（$i$）的活跃点，组成活跃区间$[i,j]$。$v$的活跃区间只需要保证在这个区间之外$v$不会活跃就行了，不需要保证$v$在这个区间内是处处活跃的，这句话的意思在<strong>Fig 1</strong>能够体现出来。</p><div style="display:flex; flex-direction:row; justify-content:space-around; align-items:flex-end">    <div>        <img src="/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/dfn.svg">        <center><b>(a) 深度优先编号</b></center>    </div>    <div>        <img src="/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/live-interval-1.svg">        <center><b>(b) 活跃区间</b></center>    </div></div><center><b>Fig 1. 两个例子</b></center><p>如果两个虚拟变量的活跃区间发生了重叠，那么可以称这两个虚拟变量存在冲突，产生了冲突的两个变量不可以使用同一个寄存器，类似于**Fig 1(b)**中两个区间，就发生了重叠，那么就不可以使用同一个寄存器了。</p><p>这里需要提到的是，对指令的编号会影响到代码生成的质量，因为在有些编号下活跃区间会更加短，更短的活跃区间会降低冲突的可能性<a href="#ref-3">[3]</a>。比如下面的例子中，<code>then</code>分支使用了$v$，但是<code>else</code>分支并没有使用v，同时<code>then</code>中的使用是最后一次使用，给<code>then</code>先编号会得到**Fig 3(b)<strong>的结果，而给<code>else</code>先编号则会得到</strong>Fig 3(a)**的结果。</p><p align="center"><img src="/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/if-else-then.svg"><b>Fig 2. 一个if-then-else控制流，其中v只在then中被使用</b></p><p><img src="/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/different-range.svg" alt="different-range"></p><center><b>Fig 3. 两种不同的编号方式</b></center><p>很容易发现，一些活跃区间会出现类似于**Fig 3(a)**的空洞，如果另外一个活跃区间正好在这个空洞里面，就不会发生冲突，不过我们这里并不利用这种空洞，而是简单地将活跃区间从头到尾当成一个整体。</p><h3 id="对活跃区间线性扫描"><a href="#对活跃区间线性扫描" class="headerlink" title="对活跃区间线性扫描"></a>对活跃区间线性扫描</h3><p>接下来对活跃区间进行扫描，在进行扫描之前首先对所有的活跃区间进行排序，根据区间开始点从低到高。排序后的活跃区间很适合进行线性扫描，对活跃区间的迭代的顺序和标号顺序是一样的。</p><p>下面开始，假设一共有$R$个可供分配的寄存器。有一个链表$active$，用于存放覆盖了当前位置的活跃区间，$active$根据每个区间的终点从高到低进行排列，反过来也行，这样有利于减少查找的次数。</p><p>每次向前扫描可以遇到一个新的活跃区间$I_{new}$，用$I_{new}$的起点$i$和$active$链表中的每个区间$I_{old}$的终点$j$进行对比，如果出现了$j \le i$，那么就将$I_{old}$从$active$中移除，这个时候可以认为$I_{old}$以及被完全处理了，不需要再次进行考虑。</p><p>再进行了对$active$的更新之后，如果$size(active) \ge R$那么此时必须要将链表中的某个$I_{old}$或者是$I_{new}$进行spill，可以使用多种方式决定到底需要将那个区间进行spill，这里给出一个heuristic，就是使用结束位置最后的一个区间进行spill，这么做的原因是，因为结束的位置最后，所以会延续很长因此可能会导致更多的区间被溢出，如果使用了区间的终点从高到低进行排列，那么$active$中最后结束的就是第一个。除此之外还可以通过区间的使用频率的等信息进行判断。</p><p><strong>Fig 4</strong>是一个来自<a href="#ref-1">[1]</a>的例子，一共有两个可用的寄存器，即$R&#x3D;2$。</p><p><img src="/2022/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/08/07/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E9%85%8D/image-20220408235832498.png" alt="image-20220408235832498"></p><center><b>(a) 五个活跃区间，其中B和E首位相连</b></center><table><thead><tr><th></th><th align="center">active intervals</th><th align="center">available registers</th><th align="center">spilled intervals</th><th align="center">allocation results</th></tr></thead><tbody><tr><td>初始</td><td align="center">${}$</td><td align="center">${r_1,r_2}$</td><td align="center">${}$</td><td align="center">${}$</td></tr><tr><td>A</td><td align="center">${A&#x3D;r_1}$</td><td align="center">${r_2}$</td><td align="center">${}$</td><td align="center">${}$</td></tr><tr><td>B</td><td align="center">${A&#x3D;r_1,B&#x3D;r_2}$</td><td align="center">${}$</td><td align="center">${}$</td><td align="center">${}$</td></tr><tr><td>C</td><td align="center">${A&#x3D;r_1,B&#x3D;r_2}$</td><td align="center">${}$</td><td align="center">${C}$</td><td align="center">${}$</td></tr><tr><td>D</td><td align="center">${D&#x3D;r_1,B&#x3D;r_2}$</td><td align="center">${}$</td><td align="center">${C}$</td><td align="center">${A&#x3D;r_1}$</td></tr><tr><td>E</td><td align="center">${D&#x3D;r_1,E&#x3D;r_2}$</td><td align="center">${}$</td><td align="center">${C}$</td><td align="center">${A&#x3D;r_1,B&#x3D;r_2}$</td></tr><tr><td>结束</td><td align="center">${}$</td><td align="center">${r_1,r_2}$</td><td align="center">${C}$</td><td align="center">${A&#x3D;r_1,B&#x3D;r_2,D&#x3D;r_1,E&#x3D;r_2}$</td></tr></tbody></table><center><b>(b) 每次迭代后的结果</b></center><center><b>Fig 4. 一个典型的例子</b></center><h3 id="进行分配和处理spill"><a href="#进行分配和处理spill" class="headerlink" title="进行分配和处理spill"></a>进行分配和处理spill</h3><p>一个区间进行了spill之后，就不再占有任何一个寄存器了，但是在使用点依旧需要对寄存器进行使用，所以在使用点可以使用任意一个寄存器，临时寄存器的选取只要保证即可不和指令内其他寄存器重复即可。此时，需要为虚拟变量在栈上分配一个空间，在对虚拟变量进行赋值之后要将值回存到栈上的空间。由于需要占用其他寄存器，那么可能会破坏寄存器中的值，所以还需要另外一个栈上的空间能够存放被临时占用的寄存器的值。</p><p>下面的例子来对spill的结果进行展示：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">......</span><br><span class="hljs-code">move 10, a // a = 10</span><br><span class="hljs-code">......</span><br>add a, b, c // c = a + b<br><span class="hljs-code">......</span><br><span class="hljs-code">move a, w // w = a</span><br><span class="hljs-code">......</span><br>move 13, a // a = 13<br>......<br></code></pre></td></tr></table></figure><p>这里假设<code>a</code>被溢出了，在栈上分配了两个位置（<code>m1</code>、<code>m2</code>），而其他的变量（<code>b</code>、<code>c</code>、<code>w</code>）均被分配到了寄存器（<code>r1</code>、<code>r2</code>、<code>r3</code>），那么在对这个程序进行改写之后得到的程序如下：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">......</span><br><span class="hljs-code">store r1, m2</span><br><span class="hljs-code">load m1, r1</span><br><span class="hljs-code">move 10, r1 // a使用r1</span><br><span class="hljs-code">store r1, m1</span><br><span class="hljs-code">load m2, r1</span><br><span class="hljs-code">......</span><br>store r3, m2<br>load m1, r3<br>add r3, r1, r2 // a使用r3<br>store r3, m1<br>load m2, r3<br><span class="hljs-code">......</span><br><span class="hljs-code">store r1, m2</span><br><span class="hljs-code">load m1, r1</span><br><span class="hljs-code">move r1, r3 // a使用r1</span><br><span class="hljs-code">store r1, m1</span><br><span class="hljs-code">load m2, r1</span><br><span class="hljs-code">......</span><br>store r1, m2<br>load m1, r1<br>move 13, r1 // a 使用r1<br>store r1, m1<br>load m2, r1<br>......<br></code></pre></td></tr></table></figure><p>用这个方法来处理spill确实不是很好，但是却很直观，对于spill有很多可以优化的地方，插入spill代码的方式对于性能的影响很大，由于这里的最简单的情况，所以就不介绍有关spill代码的优化了，其实看上面的例子也能看出来有好几个直观的改善方式，比如被溢出的变量作为<code>move</code>指令的目标的时候，根本不会用到它的值，所以可以将<code>move</code>改写为<code>store</code>，直接将值存入栈中，不过这些都需要更加复杂的rewriter。</p><h3 id="调用规约和寄存器预分配"><a href="#调用规约和寄存器预分配" class="headerlink" title="调用规约和寄存器预分配"></a>调用规约和寄存器预分配</h3><p>在一些架构上，有的指令必须要使用某个特定的寄存器，<code>return</code>可能必须使用<code>v0</code>来存放返回值。为了保证<code>return</code>语句一定可以使用的了<code>v0</code>寄存器，需要预先进行寄存器分配，也就是生成的<code>return</code>不应该使用虚拟寄存器（<code>return r0</code>）而是直接使用物理寄存器（<code>return v0</code>）。然后在原有的活跃区间中加入被预先分配了的物理寄存器的活跃区间，物理寄存器活跃区间的计算方式和虚拟寄存器是一样的。</p><p>虽然物理寄存器的处理方式和虚拟寄存器类似，但是，按照之前给出的对溢出的处理方式来看，物理寄存器的是不允许进行溢出的，因为在进行了溢出之后无法保证原有的指令能够继续使用预分配的寄存器，比如有下面的情况：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">add</span> a, b, <span class="hljs-built_in">r0</span><br><span class="hljs-comment">// 将r0溢出了，将r0分配给了a。</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">r0</span><br><span class="hljs-comment">// 发生了冲突。</span><br></code></pre></td></tr></table></figure><p>说完了如何进行寄存器的预分配，来说说调用规约的实现。对于模拟callee-saved寄存器来说，可以在方法的入口处存在对callee-saved寄存器的定值，在方法的出口处存在对callee-saved寄存器的使用，这样，就会产生一个横跨整个方法的活跃区间，同时预分配的寄存器不能溢出，会导致callee-saved寄存器实际上不能被使用。最简单的解决方式是，对所有在方法中被使用的callee-saved寄存器，在入口处保存到栈中，在出口处恢复。</p><p>模拟caller-saved寄存器，则需要让call指令使用所有的caller-saved寄存器进行模拟，由于预分配寄存器不允许进行spill，那么在处理call指令时会将使用了caller-saved寄存器的跨调用活跃区间全部溢出，会对产生非常多的load&#x2F;store指令，更加糟糕的是，如果方法内存在多个调用点，那么对caller-saved寄存器的使用会连起来，导致很大一个范围内都无法使用caller-saved寄存器，基础的线性扫描不能很好地解决这个问题。</p><p>为了缓解这个问题，可以考虑将所有的跨调用存活的变量存入到栈中，调用结束后加载到另外的虚拟变量中，这样相当于将区间截断为两个了，不过这样很麻烦，要进行重命名。或者是不对caller-saved行为进行模拟，也就是call指令不不使用它们，而是在每个call之前保存所有的caller-saved寄存器，调用结束之后进行恢复。如果要实现一个线性扫描寄存器分配的话选第二种方案就好了。</p><h2 id="解释几个可能的问题"><a href="#解释几个可能的问题" class="headerlink" title="解释几个可能的问题"></a>解释几个可能的问题</h2><h3 id="为什么是线性的？"><a href="#为什么是线性的？" class="headerlink" title="为什么是线性的？"></a>为什么是线性的？</h3><p>因为按照了活跃区间的先后顺序进行的扫描，所以叫做线性扫描，上面的算法就是按照了每个活跃区间的开始处位置进行了排序然后再进行的扫描，也不会进行任何回溯。同时线性扫描寄存器分配的时间复杂度也是线性的。</p><h3 id="有没有非线性的？"><a href="#有没有非线性的？" class="headerlink" title="有没有非线性的？"></a>有没有非线性的？</h3><p>有的，可以给每个活跃区间一个优先级，然后按照优先级顺序进行扫描，比如先给所有活跃区间短，但是可能使用次数较多的的虚拟变量更高的优先级，使其先被分配。LLVM中的<a href="https://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html">Basic和Greedy</a>寄存器分配使用的就是基于spill weight进行排序的优先队列进行的。</p><h3 id="为什么说会比图着色寄存器分配速度更加快？"><a href="#为什么说会比图着色寄存器分配速度更加快？" class="headerlink" title="为什么说会比图着色寄存器分配速度更加快？"></a>为什么说会比图着色寄存器分配速度更加快？</h3><p>因为线性扫描分配器没有构建一个全局的冲突图，而是使用了局部的冲突信息，也就是只关注了当前进行分配的live interval和当前active列表中或者inactive列表中的冲突，另外不会像图着色分配器一样反复地构建冲突图。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><span id="ref-1">[1]</span>. M. Poletto和V. Sarkar, 《Linear scan register allocation》, <em>ACM Trans. Program. Lang. Syst.</em>, 卷 21, 期 5, 页 895–913, 9月 1999, doi: <a href="https://doi.org/10.1145/330249.330250">10.1145&#x2F;330249.330250</a>.</p><p><span id="ref-2">[2]</span> C. Wimmer和H. Mössenböck, 《Optimized interval splitting in a linear scan register allocator》, 收入 <em>Proceedings of the 1st ACM&#x2F;USENIX international conference on Virtual execution environments - VEE ’05</em>, Chicago, IL, USA, 2005, 页 132. doi: <a href="https://doi.org/10.1145/1064979.1064998">10.1145&#x2F;1064979.1064998</a>.</p><p><span id="ref-3">[3]</span> C. Wimmer和M. Franz, 《Linear scan register allocation on SSA form》, 收入 <em>Proceedings of the 8th annual IEEE&#x2F; ACM international symposium on Code generation and optimization - CGO ’10</em>, Toronto, Ontario, Canada, 2010, 页 170. doi: <a href="https://doi.org/10.1145/1772954.1772979">10.1145&#x2F;1772954.1772979</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里所讲的内容主要来自于&lt;a href=&quot;#ref-1&quot;&gt;[1]&lt;/a&gt;，也就是最为基础的线性扫描寄存器分配方案，可以做到线性时间内进行寄存器分配，比起图着色分配是一种快的多的分配方案。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>钢厂记</title>
    <link href="http://example.com/2022/06/28/%E9%92%A2%E5%8E%82%E8%AE%B0/"/>
    <id>http://example.com/2022/06/28/%E9%92%A2%E5%8E%82%E8%AE%B0/</id>
    <published>2022-06-27T18:07:38.000Z</published>
    <updated>2022-07-11T16:24:04.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-序"><a href="#0-序" class="headerlink" title="0.序"></a>0.序</h3><p>钢厂是我从小生活的地方，我的家乡。但钢厂这个词，是我临时想到的，不是官方名称，周围也没有人这样叫。这样写，是出于个人信息的安全考虑，故意做模糊处理。至于全国上下有多少叫做钢厂的地方，我不得而知。钢厂记的动机，是我想写一篇文章送给今天过生日的好友。但构思的过程，牵出了一大片美好的回忆，关于彼此，也关于在钢厂的时光。毕竟，我们认识很久了。</p><h3 id="1-乐乐"><a href="#1-乐乐" class="headerlink" title="1.乐乐"></a>1.乐乐</h3><p>这就是我好友的名字。她人如其名，长着一双水灵灵的大眼睛，看起来总是很阳光快乐的样子。她的皮肤超级好，我没见过第二个人能与她相比，可以称得上是珍奇的肤质：不仅白皙，而且怎么也晒不黑。最恰当的词叫做：肤若凝脂。汗珠在她脸上可以一颗颗滚落。当我往脸上厚厚地涂一层质地油油的防晒霜时，我才恍然大悟：她的皮肤原来是自带防晒霜啊！她即使化妆，看上去也和不化妆相差无几。这样天生丽质，简直是非常让人羡慕了！</p><p>她不仅天生丽质，画画也特别好。她是真的喜欢呢，得闲便画，初中时认认真真学素描，高中又入水彩的坑。她画许多有意义的东西，比如和朋友的合影，用水彩摹出来生日送给朋友；比如画圣诞主题印成明信片寄给朋友，比如画漫画讲述家庭故事生日送给长辈……不仅技艺高超，而且对家人朋友非常非常暖心呢！</p><p>她学习也很好哦，是个学霸，超级认真，总是能把各种问题处理得很好。回想起来，上初中的时候，她会把我视作竞争对手。我刚听到的时候真的愣了，因为那个时候我根本没把学习放在心上，怎么就有人要和我竞争。后来我也就识趣地接受了她的挑战，开始认真学了起来。不幸的是，我一认真，成绩就下降。</p><p>我倒是很散漫的一个人，做什么都要失手，也没什么拿得出手的兴趣爱好，闲暇时间里就上网冲冲浪。和她倒是互补的性格，我正好能从她身上学到该怎样去认真做事情。高中我们也一直在一个班上，交流的大都是那段枯燥的时光里强行凑出来的吃喝玩乐的话题，她有很好的一起学习的伙伴，但我总是习惯一个人学，不需要外在的精神支持，总是习惯于自己支持自己。相应的，我也给不了别人精神支持。而她绝对是温暖的小太阳，能准确地把握他人的感受，言行举止都很宜人，更难能可贵的是，在一同奋斗的岁月里，她能与人同甘共苦。</p><p>她是那个亲自设计、联系卖家做班服，每天放学为全班喊“可以走了”的班长，她是那个一起在食堂吃饭时，哪怕我需要绕一大圈去操场拿回落下的水杯，让她先回去，可不论多久都要等我的人。她是那个在阳光明媚的大上午，带着我们共同的好友，来敲我家门一起写作业，笑我睡眼惺忪起床开门的样子的人……</p><p>各位看客别激动，这么优秀的小姐姐，已经名花有主了哦。至于和她性格相反的我，自然必将单身并且长期单身下去。呜呜。</p><h3 id="2-真正的挫折"><a href="#2-真正的挫折" class="headerlink" title="2.真正的挫折"></a>2.真正的挫折</h3><p>能让人成长的才是真正的挫折，否则只能算是无妄之灾，别人强加在你头上的。回想起来，我真正的成长时刻还是发生在大学，尽管中学时代大大小小的挫折也不少，但都是无趣的应试教育环境下无聊的小事罢了，与志趣、人格都没有太大关系。软弱的我一如既往软弱，只费心做题，从来没有过真正的思考。</p><p>初中时，班主任大概是接到了好事家长的电话，告状某某同学爱讲黄段子。她估计是冥思苦想了一番，想出来一个“好办法”：搞匿名投票，全班五十多号人选出你认为很“猥琐”的同学。我很惊讶，第一反应一定是吐槽，然后不打算写任何人的名字，因为不觉得谁的尊严应该被这样侮辱，也不觉得谁开黄腔过分了。她的立场是什么？显然，跪舔家长，而不是保护学生。为了舔家长，大张旗鼓地制造一个找那位同学谈话的契机。第二天，她把我叫到走廊上，说从监控里看到我跟同桌说她“小题大做”，劈头盖脸地骂了我一顿，还让我罚站一天。其实从小我的性格偏乖巧软弱，又因为成绩好，从前的老师都对我很温柔，甚至带点客气，我从来就不懂得像调皮捣蛋的学生那样，嬉皮笑脸地整老师、和老师对抗。以至于我当时只会掉眼泪，不会回怼。她这样对待反对意见，还特地调监控来看看我说了什么，现在想想，实在太恶毒了，是仰仗现代科技的文字狱。</p><p>这就是我说的，强加给我的，与我自己其实无关的，“无妄之灾”。所幸，我没两天就忘了这茬。</p><p>烦心事还多着呢！哪怕上了大学，还是不得清净。大一时因为疫情没返校，辅导员提出来帮学生去宿舍取需要的东西邮寄到学生家。好，我告诉他们我要拿两本书，它在书架的第几层哪个位置。简单的一件事，他们到了我的书桌前，却似脱缰的野马在撒欢，先是打开了我桌上一个装小水壶的不透明袋子，说这是违禁品，（谢天谢地，它的功率是宿舍里饮水机的五分之一）要给我寄回来，邮费自付。我说，它功率很其实很小，不让用，那我不用就是了，没必要给我寄回来。不行，宿舍里就是不能有违禁品。就这样让我白白多掏了十几块邮费。而且邮寄来的东西里，还有从我桌上一沓草稿纸里抽出来的一张，他在上面写“早日回校”……我真的谢谢你，你乱动我的东西还自我感觉良好了，楼下上幼儿园的小朋友都比你有礼貌……</p><p>软弱的我，从“小哭包”，成长成了“气包子”，但还没有真正长大。后来发生的一些事，带着一分痛苦，二分凄美，七分温暖的，我称为”真正的挫折”的事，才让我内心成为了一个”tough guy”。具体发生了什么，我谁也没说过，也大概会永远埋在心底。它让我现在，有十足的热情与勇气，迎接生活中的一切挑战，而且还要亲手创造，一片流着奶与蜜的富饶之地。</p><h3 id="3-岁月静好"><a href="#3-岁月静好" class="headerlink" title="3.岁月静好"></a>3.岁月静好</h3><p>奶奶家住二楼，阳台外有一个小院子。小院子有水池、花架、晾衣杆。夏日午后的微风传来胡柚花阵阵的芬芳，头顶白色的衣衫随之飘动起来。而即便是百花凋敝的季节，风依然能送来阵阵皂香。在这里，我画画，和老爸一人坐一个小板凳，用水彩细细勾勒花架上的芦荟，过后，跑进屋子让奶奶评价一下，到底谁画得更好。在这里，我和哥姐爬过栏杆偷偷来到隔壁爷爷的院子里，去摘正对着的一棵枣树上，刚刚成熟的枣。在这里，我抱着一大包薯片，把他们掰成大大小小的块儿，呆坐一下午，看成群结队的蚂蚁如何齐心协力搬运我的薯片块儿，如何想办法把它带进它们的洞穴。在这里，我浇花，这是每天下午放学要做的第一件事。花架上，有好朋友送给我的吊兰——她在自家楼下栽的一颗已经长得十分茂盛，生出了许多分支，便分我了几颗。先将其根系浸泡在清水中养一段时间，再移栽进土壤中，似乎能长得更好；有奶奶从路边捡来的月季花枝，本是光秃秃的一根枝干，插在花盆里悉心照料一段时间，便能生出大大小小的花苞，开娇艳欲滴的粉色月季；也有从花市买来的茉莉，一大丛青绿，点点白花点缀其间。每见开花总要凑近轻嗅，淡淡的茉莉花香沁人心脾；还有从我出生起就仿佛一直存在的两盆芦荟，它们扮演着”灵丹妙药”的角色，被剪去一截缓解家人的皮肤红肿，过一段时间又能长得完好。又因为年岁久远，在我眼里如同长生不老的仙灵。</p><p>在岁月静好中成长，青年时代的我，拥有十足的勇气去开创、去进步。但为什么我再一次选择了岁月静好呢?因为，我已经不知道说什么、做什么是”对”的了，而我必须保护我各个平台的账号安全、以及我的人身安全。所幸我知道，晒一晒逛街和奶茶的照片，晒一晒新买的衣服，一定没什么问题。虽然没有什么美好的，但，这就是我的岁月静好。</p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0-序&quot;&gt;&lt;a href=&quot;#0-序&quot; class=&quot;headerlink&quot; title=&quot;0.序&quot;&gt;&lt;/a&gt;0.序&lt;/h3&gt;&lt;p&gt;钢厂是我从小生活的地方，我的家乡。但钢厂这个词，是我临时想到的，不是官方名称，周围也没有人这样叫。这样写，是出于个人信息的安全考虑，</summary>
      
    
    
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客无法显示图片，如何解决？</title>
    <link href="http://example.com/2022/05/09/Hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/05/09/Hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-09T12:33:20.000Z</published>
    <updated>2022-05-30T16:07:18.630Z</updated>
    
    <content type="html"><![CDATA[<h4 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h4><blockquote><p>使用typora编辑.md文件，通过复制等方法向文章中插入图片,本地可见，网页上无法显示</p></blockquote><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>进入hexo顶层文件，向node_module中下载hexo-asset-image插件</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>打开_config.yml文件，编辑</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>向文章中想要插入图片的地方写一段html代码，如下：</p><p><img src="/2022/05/09/Hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/image-20220509204855167.png" alt="image-20220509204855167"></p><p>路径名称“地址”部分需和.md文件同级</p><h4 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h4><blockquote><p>每篇文章的封面图post image，只有在网站第一页的文章会显示，其他页、或者tag、categories栏都不显示</p><p><img src="/2022/05/09/Hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/image-20220509210017000.png" alt="image-20220509210017000"></p><p>​第二页的文章</p></blockquote><p>文章front matter中photo后的路径，image\图片名.jpg，这个image文件夹的位置是hexo-&gt;source-&gt;image，而这个路径可能和<strong>第一页</strong>的文章位置同级，但非第一页的文章被移入了其他文件夹，导致无法从这篇文章找到image\图片名.jpg</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>由于魔改文件夹实在没改出来，最后将front matter中的路径改成图床生成的路径（图床是一种图片外链服务）</p><p><a href="https://sm.ms/login">图床网站</a></p><p align="center"><img src="https://s2.loli.net/2022/05/09/d3Eo1Xmw7c2eWVA.jpg" width="30%"></p>]]></content>
    
    
    <summary type="html">解决了困扰我许久的封面图不显示的问题:-D</summary>
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>用正三和弦为旋律配和声</title>
    <link href="http://example.com/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/"/>
    <id>http://example.com/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/</id>
    <published>2022-04-16T12:46:39.000Z</published>
    <updated>2022-06-12T16:20:20.186Z</updated>
    
    <content type="html"><![CDATA[<p>截至目前，我们需要解决的问题如下：给出一段旋律，用<strong>正三和弦</strong>为其配和声</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220416205055597.png" width="50%"></p><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ul><li>基础乐理知识。参考书籍《音乐理论基础》李重光 编</li><li>《和声学》中基础概念<ul><li>和声、和音、和弦辨析：<ul><li>使几个音组合成<strong>和音</strong>，并使这样的一些和音形成连续的进行，就是<strong>和声</strong>。和声学就是研究和音的结构以及它们如何连接的理论。</li><li>几个不同的音在同一时间的结合叫做<strong>和音</strong>。</li><li>三个、四个或者五个音高和音名都不相同的音组成的和音就是<strong>和弦</strong>。它们被称为三和弦、七和弦和九和弦。和弦按三度排列后，</li></ul></li><li><strong>根音</strong>：和弦按<strong>三度排列</strong>后的最低音。依次往上称为三音、五音、七音、九音。</li><li><strong>原位和弦</strong>：最低音为根音的和弦</li><li><strong>大三和弦</strong>：由大三度与小三度构成的三和弦（例如，do到mi,是两个全音，而mi到so是一个半音+一个全音，相应的，小二度指一个半音）</li><li><strong>四部和声</strong>：在音乐作品中，三和弦很少用三个声部来陈述，最常见的是四部和声：女高音（高音部）、女低音（中音部）、男高音（次中音部）、男低音（低音部）</li><li><strong>主和弦</strong>：建立在音阶的Ⅰ级（主音）上的三和弦。主和弦在大调中用<strong>T</strong>来表示，在小调中用<strong>t</strong>表示（注：音阶中的“级”，给音阶按1、2、3……顺序标号，第一个音就是Ⅰ级，如C大调第一级为C，第二级为D，以此类推）</li><li><strong>属和弦</strong>：在音阶的Ⅴ级上构成的三和弦。用<strong>D</strong>表示，因为在音响上它总是大三和弦。</li><li><strong>下属和弦</strong>：在音阶的Ⅳ级上构成的三和弦。大调音阶上用S标记，小调上用s标记</li><li><strong>正三和弦</strong>：主和弦、属和弦与下属和弦</li><li><strong>和声连接法</strong>：上三声部中，两个和弦连接时有共同音（主和属，主和下属），将这两个共同音放进同一个声部，称为和声连接法。其余两个音平行级进（即同时升高或降低2度。1度指同度，2度指相邻音级）</li><li><strong>旋律连接法</strong>：两个和弦连接时，如果有共同音但不将其置于同一声部，或无共同音，它们的连接就叫做旋律连接法</li></ul></li></ul><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>1.确定这段旋律的调号，确定主音，从而确定其Ⅰ Ⅳ Ⅴ级和弦是什么。</p><ul><li>一共有15个调号，升号调顺序：<em>fa do so re la mi ti</em>，降号调顺序：<em>ti mi la re so do fa</em></li><li>升号调大调主音在最后一个升号上方小二度。例如：升fa do so re,最后一个升号是升Re,则主音为mi,是E大调。降号调倒数第二个降号就是大调主音。例如：降ti mi la,是ьE大调。需记住，一个降号就是F大调。</li><li>大调的关系小调的主音在大调主音下方小三度。例如：E大调的关系小调是c小调。自然大调的关系小调是自然小调，配和声时采用和声小调，即自然小调的基础上升高7级音（大调的5级音），这个音称为<strong>导音</strong>。</li><li>如果给定的旋律中大调的5级音是升高的，或者旋律结束在小调的主音上，那么它的调号是大调对应的和声小调。</li></ul><p>2.确定和弦的连接。规则为</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220426150050434.png" width="20%"></p><ul><li>旋律音在哪个和弦中，就采用哪个和弦。当旋律音可能在多种和弦中，则根据上图的进行规则做选择。开头结尾能用主和弦就用主和弦，相邻两个和弦需不同。</li><li>低音声部进行时，和声连接法可以4&#x2F;5度进行，旋律连接法低音声部只能是4度或者小于4度的进行。进行，通俗的理解就是从前一个音到当前音，严谨定义暂且不表。</li><li><strong>特例</strong>：旋律连接法在<strong>中止</strong>时（最后两个和弦），属和弦连接到主和弦时，假如内声部（中音、次中音）的<strong>导音</strong>向上解决（到主音上），低音声部允许使用5度进行。这时可省略五音，但三音不可省略，形成一个三个根音，一个三音的局面。这样的和弦是不符合规则但丰满的，也可以避免四部同向的局面出现。另一种避免四部同向的方法是，将之前所有低音均降低一个八度。</li></ul><p>3.确定采用开放排列还是密集排列。标准是：当前旋律平均在三线以上，采用开放，反之密集。从头到尾采用同一种排列法。</p><ul><li>上三声部相邻两声部距离：开放排列：5&#x2F;6度；密集排列：3&#x2F;4度；另一个标准是，前者相邻两音间还能插入本和弦的一个音而后者不行。</li><li>下两个声部距离：最小为同度，最大为两个声部</li></ul><p>4.写和弦。</p><ul><li>四个声部包括两个根音，一个三音，一个五音，最下方必须为根音</li><li>四个声部的音高范围：<em>Soprano</em>(高）B3-C6   ；Alto（中）E3-G4 ；Tenor（次中）C3-A4； Bass（低）C2-C4 声部间不可交叉</li></ul><h4 id="接下来，一起做题吧"><a href="#接下来，一起做题吧" class="headerlink" title="接下来，一起做题吧"></a>接下来，一起做题吧</h4><p>首先，学会把旋律好好地抄下来噢</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501004722868.png" width="100%"></p><p>然后，给步骤1，2画上小抄……，注意确定导音是哪一个噢（勘误：图中最右边Ⅴ级和弦so应为升so)</p><p>至于步骤3，一眼可以看出来选择开放排列噢</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005054636.png" width="100%"></p><p>最后，就可以按步骤4写和弦了噢。低音不确定时，看看是和声连接法还是旋律连接法再做决定！</p><p>本题中的最后一个和弦，就涉及步骤2中的<strong>特例</strong>噢。</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005233711.png" width="100%"></p><h4 id="Try-it-yourself"><a href="#Try-it-yourself" class="headerlink" title="Try it yourself!"></a>Try it yourself!</h4><h5 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h5><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005621457.png" width="80%"></p><p>参考答案：</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005702234.png" width="60%"></p><h5 id="problem-2"><a href="#problem-2" class="headerlink" title="problem 2"></a>problem 2</h5><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005754363.png" width="100%"></p><p>参考答案：</p><p align="center"><img src="/2022/04/16/%E7%94%A8%E6%AD%A3%E4%B8%89%E5%92%8C%E5%BC%A6%E4%B8%BA%E6%97%8B%E5%BE%8B%E9%85%8D%E5%92%8C%E5%A3%B0/image-20220501005830236.png" width="80%"></p><pre><code>授课教师：天津音乐学院 陈乐昌</code></pre><p><a href="https://www.pixiv.net/artworks/91802829">封面图来源</a></p>]]></content>
    
    
    <summary type="html">斯波索宾和声学前四章笔记</summary>
    
    
    
    
    <category term="和声学" scheme="http://example.com/tags/%E5%92%8C%E5%A3%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>TilTheCowsComeHome</title>
    <link href="http://example.com/2022/03/08/TilTheCowsComeHome/"/>
    <id>http://example.com/2022/03/08/TilTheCowsComeHome/</id>
    <published>2022-03-08T06:53:59.000Z</published>
    <updated>2022-03-12T13:39:11.390Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>Bessie is out in the field and wants to get back to the barn to get as  much sleep as possible before Farmer John wakes her for the morning  milking. Bessie needs her beauty sleep, so she wants to get back as  quickly as possible. </p><p>Farmer John’s field has N (2 &lt;&#x3D; N &lt;&#x3D; 1000) landmarks in it,  uniquely numbered 1..N. Landmark 1 is the barn; the apple tree grove in  which Bessie stands all day is landmark N.  Cows travel in the field  using T (1 &lt;&#x3D; T &lt;&#x3D; 2000) bidirectional cow-trails of various  lengths between the landmarks. Bessie is not confident of her navigation ability, so she always stays on a trail from its start to its end once  she starts it. </p><p>Given the trails between the landmarks, determine the minimum  distance Bessie must walk to get back to the barn.  It is guaranteed  that some such route exists.</p><h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><p>* Line 1: Two integers: T and N </p><p>* Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the  trail travels. The third integer is the length of the trail, range  1..100.</p><h5 id="output"><a href="#output" class="headerlink" title="output"></a>output</h5><p>* Line 1: A single integer, the minimum distance that Bessie must travel to get from landmark N to landmark 1.</p><h5 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h5><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">90<br></code></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h4&gt;&lt;p&gt;Bessie is out in the field and wan</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>实现springboot+vue前后分离的增删改查</title>
    <link href="http://example.com/2022/03/01/%E5%AE%9E%E7%8E%B0springboot-vue%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://example.com/2022/03/01/%E5%AE%9E%E7%8E%B0springboot-vue%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2022-03-01T15:17:03.000Z</published>
    <updated>2022-03-07T07:48:51.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置环节"><a href="#配置环节" class="headerlink" title="配置环节"></a>配置环节</h4><p>1.从github拉取源码</p><p>2.安装idea编辑器、lombok插件</p><p>3.安装mysql(18.0.0以上的版本，在oracle官网下载zip，解压到E盘，添加bin文件夹至path)</p><p>4.安装navicat</p><p>参考<a href="https://blog.csdn.net/kriston/article/details/106587836"> 用Navicat连接MySQL的安装及配置_kriston的博客-CSDN博客_navicat连接配置文件</a></p><p><a href="https://blog.csdn.net/qq_25742923/article/details/104522891">MySQL与Navicat安装及配置_愤怒的软绵绵的博客-CSDN博客_navicat下载安装以及配置</a></p><p>注意记录下来mysqld –install后随即生成的密码，之后输入</p><p>注意右键以管理员身份打开cmd</p><p>5.更换node版本（先前安装的14以上的不适用此项目，需更低）</p><p>参考<a href="https://www.cnblogs.com/zjknb/p/11715007.html">如何在windows下切换node版本 - 周家大院 - 博客园 (cnblogs.com)</a></p><p>先安装nvm，然后将node.js文件路径添加到环境变量中。理论上，安装nvm之前不应该存在node。但也无需手动卸载，安装nvm过程会处理的。</p><p>demo成功跑通！</p><p>(具体运行方法参考<a href="https://www.bilibili.com/video/BV1qB4y1M7vP?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click">8分钟学完springboot+vue前后分离的增删改查_哔哩哔哩_bilibili</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;配置环节&quot;&gt;&lt;a href=&quot;#配置环节&quot; class=&quot;headerlink&quot; title=&quot;配置环节&quot;&gt;&lt;/a&gt;配置环节&lt;/h4&gt;&lt;p&gt;1.从github拉取源码&lt;/p&gt;
&lt;p&gt;2.安装idea编辑器、lombok插件&lt;/p&gt;
&lt;p&gt;3.安装mysql(18.</summary>
      
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Networking</title>
    <link href="http://example.com/2022/02/27/Networking/"/>
    <id>http://example.com/2022/02/27/Networking/</id>
    <published>2022-02-27T15:26:35.000Z</published>
    <updated>2022-03-11T03:01:42.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are assigned to design network connections between certain points in a wide area. You are given a set of points in the area, and a set of  possible routes for the cables that may connect pairs of points. For  each possible route between two points, you are given the length of the  cable that is needed to connect the points over that route. Note that  there may exist many possible routes between two given points. It is  assumed that the given possible routes connect (directly or indirectly)  each two points in the area.<br>Your task is to design the network for the area, so that there is a  connection (direct or indirect) between every two points (i.e., all the  points are interconnected, but not necessarily by a direct cable), and  that the total length of the used cable is minimal.</p><p><strong>input</strong></p><p>The input file consists of a number of data sets. Each data set defines  one required network. The first line of the set contains two integers:  the first defines the number P of the given points, and the second the  number R of given routes between the points. The following R lines  define the given routes between the points, each giving three integer  numbers: the first two numbers identify the points, and the third gives  the length of the route. The numbers are separated with white spaces. A  data set giving only one number P&#x3D;0 denotes the end of the input. The  data sets are separated with an empty line.<br>The maximal number of points is 50. The maximal length of a given  route is 100. The number of possible routes is unlimited. The nodes are  identified with integers between 1 and P (inclusive). The routes between two points i and j may be given as i j or as j i.</p><p><strong>output</strong></p><p>For each data set, print one number on a separate line that gives the  total length of the cable used for the entire designed network.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>生成树（spanning tree）</strong>：一个连通无向图的生成子图，同时要求是树。也即在图的边集中选择 n-1条，将所有顶点连通。</p><p><strong>Kruskal算法</strong>：求最小生成树</p><p><img src="/2022/02/27/Networking/image-20220228234425632.png" alt="image-20220228234425632"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500007</span>;<br><span class="hljs-type">int</span> cnt,fa[N];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;t)<span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> z &lt; t.z;<br>    &#125;<br>&#125;a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x] == x)<span class="hljs-keyword">return</span> x;<br>    fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m)==<span class="hljs-number">2</span> &amp;&amp; n)&#123;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y, z; i &lt;= m; ++ i)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>            a[++ cnt ] = &#123;x, y, z&#125;;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span> ,a + <span class="hljs-number">1</span> + cnt);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)fa[i] = i;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++ i)&#123;<br>            <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(a[i].x), y = <span class="hljs-built_in">find</span>(a[i].y);<br>            <span class="hljs-keyword">if</span>(x != y)&#123;<br>                ans += a[i].z;<br>                fa[x] = y;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;You are assigned to design network</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="最小生成树" scheme="http://example.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署报错解决</title>
    <link href="http://example.com/2022/02/26/Hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2022/02/26/Hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</id>
    <published>2022-02-26T15:54:12.000Z</published>
    <updated>2022-02-26T15:57:34.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>hexo d之后</p><figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/XXX/XXX.github.io.git/&#x27;: Failed to connect to github.com port 443: Timed out<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    ......<br></code></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>设置-&gt;代理-&gt;手动代理设置，查看梯子在本地的代理地址及端口号，一般为<code>127.0.0.1:xxxx</code>；</li><li>关闭各种国产杀毒、清理软件，启动梯子；</li><li>打开终端，依次输入：<ul><li><code>git config --global http.proxy http://127.0.0.1:xxxx</code></li><li><code>git config --global https.proxy https://127.0.0.1:xxxx</code></li></ul></li><li><code>hexo d</code> 即可部署；</li><li>最后取消代理，依次输入：<ul><li><code>git config --global --unset http.proxy</code></li><li><code>git config --global --unset https.proxy</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h3&gt;&lt;p&gt;hexo d之后&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>食物链[HAOI2016]</title>
    <link href="http://example.com/2022/02/26/%E9%A3%9F%E7%89%A9%E9%93%BE-HAOI2016/"/>
    <id>http://example.com/2022/02/26/%E9%A3%9F%E7%89%A9%E9%93%BE-HAOI2016/</id>
    <published>2022-02-26T13:32:49.000Z</published>
    <updated>2022-03-11T03:01:04.575Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/26/%E9%A3%9F%E7%89%A9%E9%93%BE-HAOI2016/13153.png" alt="img"></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>如图所示为某生态系统的食物网示意图，据图回答第1小题现在给你n个物种和m条能量流动关系，求其中的食物链条数。物种的名称为从1到n编号M条能量流动关系形如a1 b1a2 b2a3 b3……am-1 bm-1am bm其中ai bi表示能量从物种ai流向物种bi,注意单独的一种孤立生物不算一条食物链</p><p><strong>输入格式</strong></p><p>第一行两个整数n和m,接下来m行每行两个整数ai bi描述m条能量流动关系。（数据保证输入数据符号生物学特点，且不会有重复的能量流动关系出现）1&lt;&#x3D;N&lt;&#x3D;100000 0&lt;&#x3D;m&lt;&#x3D;200000题目保证答案不会爆 int</p><p><strong>输出格式</strong></p><p>一个整数即食物网中的食物链条数</p><p><strong>输入输出样例</strong></p><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">16</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>从入读为零的点进行记忆化搜索，搜到出度为零的点返回1</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxm = <span class="hljs-number">2e5</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> n,m,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mem[maxn],outD[maxn],inD[maxn],hd[maxm];<span class="hljs-comment">//</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>  <span class="hljs-type">int</span> u,v,nxt;<br>&#125;e[maxm];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> uu,<span class="hljs-type">int</span> vv)</span></span>&#123;<br>  cnt++;<br>  e[cnt].u=uu;<br>  e[cnt].v=vv;<br>  e[cnt].nxt=hd[uu];<span class="hljs-comment">//hd[uu]表示从uu出发的边（nxt表示相邻关系）</span><br>  hd[uu]=cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>  <span class="hljs-keyword">if</span>(mem[x]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> mem[x];<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(outD[x]==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=hd[x];i;i=e[i].nxt)&#123;<br>    ans+=<span class="hljs-built_in">dfs</span>(e[i].v);<span class="hljs-comment">//对出点dfs</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> mem[x]=ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> a,b,ans=<span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(mem,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(mem));<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>    <span class="hljs-built_in">addedge</span>(a,b);<br>    outD[a]++;<br>    inD[b]++;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(inD[i]==<span class="hljs-number">0</span>&amp;&amp;outD[i]!=<span class="hljs-number">0</span>) <br>    ans+=<span class="hljs-built_in">dfs</span>(i);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/02/26/%E9%A3%9F%E7%89%A9%E9%93%BE-HAOI2016/13153.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
    <category term="图论" scheme="http://example.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>树[BZOJ2783]</title>
    <link href="http://example.com/2022/02/26/%E6%A0%91-BZOJ2783/"/>
    <id>http://example.com/2022/02/26/%E6%A0%91-BZOJ2783/</id>
    <published>2022-02-26T12:57:36.000Z</published>
    <updated>2022-03-11T03:00:48.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>第一行是两个整数N和S，其中<em>N</em>是树的节点数。</p><p>第二行是N个正整数，第i个整数表示节点i的正整数。</p><p>接下来的N-1行每行是2个整数x和y，表示y是x的儿子。</p><p><strong>输出格式：</strong></p><p>输出路径节点总和为S的路径数量。</p><table><thead><tr><th><strong>输入样例：</strong></th><th><strong>输出样例：</strong></th></tr></thead><tbody><tr><td>3 3</td><td>2</td></tr><tr><td>1 2 3</td><td></td></tr><tr><td>1 2</td><td></td></tr><tr><td>1 3</td><td></td></tr></tbody></table><p><strong>数据范围：</strong></p><p>对于30%数据，N≤100；</p><p>对于60%数据，N≤1000；</p><p>对于100%数据，N≤100000，所有权值以及S都不超过1000。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>在这个问题中，给定一个值S和一棵树。在树的每个节点有一个正整数，问有多少条路径的节点总和达到S。路径中节点的深度必须是升序的。假设节点1是根节点，根的深度是0，它的儿子节点的深度为1。路径不必一定从根节点开始。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为求的路径都是从在包含根的一条链上。所以可以考虑直接dfs。记录元素前缀和。</p><p>比如搜到x，在set里面查询有没有sum[x]-s，有的话ans++，然后继续往下dfs时插入sum[x]</p><p>最开始要插入0</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> n,s,cnt=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sum[maxn],hd[maxn],node[maxn];<br>set&lt;<span class="hljs-type">int</span>&gt; ss;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>  <span class="hljs-type">int</span> v,nxt,vu,vv;<br>&#125;e[maxn];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>  e[++cnt].v=b;<br>  e[cnt].nxt=hd[a];<span class="hljs-comment">//hd[uu]表示从uu出发的边（nxt表示相邻关系）</span><br>  hd[a]=cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    ss.<span class="hljs-built_in">insert</span>(sum[x]);<br>    <span class="hljs-keyword">if</span>(ss.<span class="hljs-built_in">find</span>(sum[x]-s)!=ss.<span class="hljs-built_in">end</span>()) ans++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=hd[x];i;i=e[i].nxt)&#123;<br>        sum[e[i].v]=sum[x]+node[e[i].v];<br>        <span class="hljs-built_in">dfs</span>(e[i].v);<br>    &#125;<br>    ss.<span class="hljs-built_in">erase</span>(ss.<span class="hljs-built_in">find</span>(sum[x]));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> a,b;<br>  ss.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;s);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;node[i]);<br>  sum[<span class="hljs-number">1</span>]=node[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>    <span class="hljs-built_in">addedge</span>(a,b);<br>  &#125;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;第一行是两个整数N和S，其中&lt;em&gt;N&lt;/em&gt;是树的节点数。&lt;/p</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="前缀和" scheme="http://example.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Git与Github使用笔记</title>
    <link href="http://example.com/2022/02/16/Git%E4%B8%8EGithub%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/02/16/Git%E4%B8%8EGithub%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-16T15:26:06.000Z</published>
    <updated>2022-05-09T13:11:28.969Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git和Github"><a href="#Git和Github" class="headerlink" title="Git和Github"></a>Git和Github</h4><p>git：版本控制软件，github是基于git打造的网站</p><p>git的三个概念：提交commit、仓库repository、分支branch(多个开发者,合并main)</p><h4 id="看别人的Github项目"><a href="#看别人的Github项目" class="headerlink" title="看别人的Github项目"></a>看别人的Github项目</h4><h5 id="github项目下载到本地"><a href="#github项目下载到本地" class="headerlink" title="github项目下载到本地"></a>github项目下载到本地</h5><p>绿色按钮Code-&gt;获取项目地址-&gt;在本地文件夹打开git bash-&gt;git clone+地址-&gt;下载</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>README.md,issue,LICENSE……</p><h4 id="找开源项目"><a href="#找开源项目" class="headerlink" title="找开源项目"></a>找开源项目</h4><h5 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h5><p>掘金、github trending、hello guthub刊物……</p><h5 id="查找技巧"><a href="#查找技巧" class="headerlink" title="查找技巧"></a>查找技巧</h5><p>常用前缀后缀：</p><ul><li>找百科大全 awesome XXX(技术名)</li><li>找例子 XXX sample</li><li>找空项目架子 XXX starter&#x2F;XXX boilerplate</li><li>找教程 XXX tutorial</li></ul><h4 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h4><p>本地项目文件夹下打开git bash,输入git init,上传至仓库</p><h5 id="结合vscode使用"><a href="#结合vscode使用" class="headerlink" title="结合vscode使用"></a>结合vscode使用</h5><p>安装gitlen插件</p><p>终端增加git bash</p><p>配置 ：将Git的bin添加到PATH-&gt;vscode左下角设置-&gt;搜索terminal.integrated.defaultProfile.windows”-&gt;打开settings.json-&gt;编辑为如下代码</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Git-Bash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\filesAboutHexo\\Git\\bin\\bash.exe&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Git-Bash&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>ps:将某一路径添加到PATH:右击此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;双击上窗口中Path-&gt;浏览并加入路径</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ul><li>克隆仓库：<code>git clone &lt;git地址&gt;</code><br>初始化仓库：<code>git init</code> </li><li>添加文件到暂存区：<code>git add -A</code><br>把暂存区的文件提交到仓库：<code>git commit -m &quot;提交信息&quot;</code><br>查看提交的历史记录：<code>git log --stat</code></li><li>工作区回滚：<code>git checkout &lt;filename&gt;</code><br>撤销最后一次提交：<code>git reset HEAD^1</code></li><li>以当前分支为基础新建分支：<code>git checkout -b &lt;branchname&gt;</code><br>列举所有的分支：<code>git branch</code><br>单纯地切换到某个分支：<code>git checkout &lt;branchname&gt;</code><br>删掉特定的分支：<code>git branch -D &lt;branchname&gt;</code><br>合并分支：<code>git merge &lt;branchname&gt;</code></li><li>推送当前分支最新的提交到远程：<code>git push</code><br>拉取远程分支最新的提交到本地：<code>git pull</code></li></ul><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>比如说现在有一个很牛逼的项目，我们进入项目地址，</p><p>想将这个项目复制到自己的github仓库，然后你还想将仓库中的代码拉取到本地进行修改，</p><p>修改完你还要将本地的修改后的代码推送到自己的github仓库，</p><p>更甚至你还想将自己复制过来并修改后的代码再还给原作者，请求人家让你合并。</p><p><strong>实现</strong></p><ul><li>fork</li><li>fork完别人的代码后，自己的账号下也有了这个项目，将其git clone到自己的电脑</li><li>接下来就可以对这个项目进行修改了，但是不建议在master分支上直接修改，最好是在master分支基础上切出一个dev分支，然后在dev分支上修改，修改完成后，再将dev分支merge到master分支。</li><li>在自己的电脑上修改好代码后，再使用git push 命令将改动同步到自己的Github仓库中</li></ul><p>到此，你就完成了克隆别人的代码，并且对代码进行了修改操作，你还可以向原作者提交你的代码。</p><ul><li>点击自己的仓库中的pull request下的New pull request，之后github会自动对比</li><li>原仓库分支与自己仓库分支代码，看看是否有冲突。如果它显示Able to merge的话，就可以点击Create pull request 按钮，进行提交。</li><li>点击之后，会跳到注释的部分，可以跟原作者说明改动了什么，以及改的原因等。</li><li>最后点击绿色的Create pull request 即可。然后原作者就会收到pull request了。你也完成了对项目的贡献。</li></ul><h4 id="关于fork和clone"><a href="#关于fork和clone" class="headerlink" title="关于fork和clone"></a>关于fork和clone</h4><p><strong>来自知乎用户@刘跃</strong></p><blockquote><p>个人认为，fork是social coding的一种形式。当一个项目存在issue的时候，其他开发者可以插手对代码进行改动，也就是fork之后发pull request</p><p>而clone一个项目下来之后，push到自己账号下的行为，个人觉得如果不违反原项目的license,应该没有什么问题。相当于你做了一个branch出来，甚至有的license都允许你把名字改了</p></blockquote><h3 id="一些reference"><a href="#一些reference" class="headerlink" title="一些reference"></a>一些reference</h3><p><a href="https://lctt.github.io/wiki/tutorials/gitbasic.html">https://lctt.github.io/wiki/tutorials/gitbasic.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Git和Github&quot;&gt;&lt;a href=&quot;#Git和Github&quot; class=&quot;headerlink&quot; title=&quot;Git和Github&quot;&gt;&lt;/a&gt;Git和Github&lt;/h4&gt;&lt;p&gt;git：版本控制软件，github是基于git打造的网站&lt;/p&gt;
&lt;p&gt;gi</summary>
      
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>设计位集</title>
    <link href="http://example.com/2022/02/09/%E8%AE%BE%E8%AE%A1%E4%BD%8D%E9%9B%86/"/>
    <id>http://example.com/2022/02/09/%E8%AE%BE%E8%AE%A1%E4%BD%8D%E9%9B%86/</id>
    <published>2022-02-09T06:42:44.000Z</published>
    <updated>2022-02-09T07:18:30.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>实现 Bitset 类。</p><ul><li><p>Bitset(int size) 用 size 个位初始化 Bitset ，所有位都是 0 。</p></li><li><p>void fix(int idx) 将下标为 idx 的位上的值更新为 1 。如果值已经是 1 ，则不会发生任何改变。</p></li><li><p>void unfix(int idx) 将下标为 idx 的位上的值更新为 0 。如果值已经是 0 ，则不会发生任何改变。</p></li><li><p>void flip() 翻转 Bitset 中每一位上的值。换句话说，所有值为 0 的位将会变成 1 ，反之亦然。</p></li><li><p>boolean all() 检查 Bitset 中 每一位 的值是否都是 1 。如果满足此条件，返回 true ；否则，返回 false 。</p></li><li><p>boolean one() 检查 Bitset 中 是否 至少一位 的值是 1 。如果满足此条件，返回 true ；否则，返回 false 。</p></li><li><p>int count() 返回 Bitset 中值为 1 的位的 总数 。</p></li><li><p>String toString() 返回 Bitset 的当前组成情况。注意，在结果字符串中，第 i 个下标处的字符应该与 Bitset 中的第 i 位一致。</p></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>逐位处理超时。设置懒惰标记。动作发出时，记录下动作，而并不真正的执行，等到真正应用时再执行 。<br>flips 表示当前是否处于翻转状态，初始为 false 。<br>对于 void fix(int idx) 操作<br>    当前不处于翻转状态，即 flips&#x3D;false，如果bit[idx]等于 0，那么 bit[idx] &#x3D; 1、count1++。<br>    当前处于翻转状态，即 flips&#x3D;true，如果bit[idx]等于 1，那么 bit[idx] &#x3D; 0、count1++。<br>对于void flip() 操作，对翻转状态和 1 的数量取反 flips ^&#x3D; 1、count1 &#x3D; size - count1。<br>对于string toString() 操作，对数组bit[]操作，根据flips当前是否处于翻转状态，对bit[]数组进行翻转，将数组拼接成字符串即可。<br>时间复杂度：Bitset(int size) 和 string toString() 操作都是 O(size) ，其余都为 O(1) 。空间复杂度： O(size) </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bitset</span> &#123;<br>    <span class="hljs-type">int</span> c[<span class="hljs-number">100001</span>],f,cnt1,s;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Bitset</span>(<span class="hljs-type">int</span> size) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)c[i]=<span class="hljs-number">0</span>;<br>        f=<span class="hljs-number">0</span>;cnt1=<span class="hljs-number">0</span>;<span class="hljs-comment">//f=0表示正状态</span><br>        s=size;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fix</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(c[idx]^f==<span class="hljs-number">1</span>)&#123;<br>            cnt1--;<br>        &#125;<br>        c[idx]=f^<span class="hljs-number">1</span>;<br>        cnt1++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unfix</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(c[idx]^f==<span class="hljs-number">0</span>)&#123;<br>            cnt1++;<br>        &#125;<br>        c[idx]=f;<br>        cnt1--;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flip</span><span class="hljs-params">()</span> </span>&#123;<br>        f^=<span class="hljs-number">1</span>;<br>        cnt1=s-cnt1;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">all</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt1==s;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">one</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt1;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt1;<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        string ans=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s;i++)&#123;<br>            <span class="hljs-keyword">if</span>(c[i]^f)ans+=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            <span class="hljs-keyword">else</span> ans+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Bitset object will be instantiated and called as such:</span><br><span class="hljs-comment"> * Bitset* obj = new Bitset(size);</span><br><span class="hljs-comment"> * obj-&gt;fix(idx);</span><br><span class="hljs-comment"> * obj-&gt;unfix(idx);</span><br><span class="hljs-comment"> * obj-&gt;flip();</span><br><span class="hljs-comment"> * bool param_4 = obj-&gt;all();</span><br><span class="hljs-comment"> * bool param_5 = obj-&gt;one();</span><br><span class="hljs-comment"> * int param_6 = obj-&gt;count();</span><br><span class="hljs-comment"> * string param_7 = obj-&gt;toString();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;实现 Bitset 类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bitset(int size) 用 size 个位初始化 Bitset ，所有位</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="懒惰标记" scheme="http://example.com/tags/%E6%87%92%E6%83%B0%E6%A0%87%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-blog-encrypt，给博客文章加密</title>
    <link href="http://example.com/2022/02/05/Hexo-blog-encrypt%EF%BC%8C%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2022/02/05/Hexo-blog-encrypt%EF%BC%8C%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</id>
    <published>2022-02-04T18:10:06.000Z</published>
    <updated>2022-02-05T08:24:15.333Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xsin.gitee.io/2019/01/11/hexo-blog-encrypt/">原文链接</a></p><p><a href="https://badge.fury.io/js/hexo-blog-encrypt"><img src="/2022/02/05/Hexo-blog-encrypt%EF%BC%8C%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/hexo-blog-encrypt.svg" alt="npm version"></a></p><h3 id="什么是Hexo-Blog-Encrypt"><a href="#什么是Hexo-Blog-Encrypt" class="headerlink" title="什么是Hexo-Blog-Encrypt"></a>什么是Hexo-Blog-Encrypt</h3><blockquote><p>试想，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到它。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。对于 emlog 或者 wordpress 来说，这很容易，但是对于 hexo 来说，之前并没有一个类似的功能。</p><p>所以，Hexo-Blog-Encrypt 因为这个需求而诞生了。</p></blockquote><h3 id="线上Demo"><a href="#线上Demo" class="headerlink" title="线上Demo"></a>线上Demo</h3><p>你可以查看 <a href="https://mhexo.github.io/example-site/2016/10/26/HexoBlogEncrpyt/">mhexo.github.io&#x2F;example-site&#x2F;2016&#x2F;10&#x2F;26&#x2F;HexoBlogEncrpyt&#x2F;</a></p><p>所有的密码都是 “mikemessi”</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><code>npm install --save hexo-blog-encrypt</code></li><li>或者 <code>yarn add hexo-blog-encrypt</code> (需要安装 <a href="https://yarnpkg.com/en/">Yarn</a>)</li></ul><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ul><li>首先在 <code>_config.yml</code> 中启用该插件:</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Security</span><br><span class="hljs-comment">##</span><br><span class="hljs-attr">encrypt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>然后在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">hello</span> <span class="hljs-string">world</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2016-03-30 21:18:02</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">fdsafsdaf</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">Mike</span><br><span class="hljs-attr">abstract:</span> <span class="hljs-string">Welcome</span> <span class="hljs-string">to</span> <span class="hljs-string">my</span> <span class="hljs-string">blog,</span> <span class="hljs-string">enter</span> <span class="hljs-string">password</span> <span class="hljs-string">to</span> <span class="hljs-string">read.</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">Welcome</span> <span class="hljs-string">to</span> <span class="hljs-string">my</span> <span class="hljs-string">blog,</span> <span class="hljs-string">enter</span> <span class="hljs-string">password</span> <span class="hljs-string">to</span> <span class="hljs-string">read.</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>password: 是该博客加密使用的密码</p><p>abstract: 是该博客的摘要，会显示在博客的列表页</p><p>message: 这个是博客查看时，密码输入框上面的描述性文字</p><ul><li>如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下：</li></ul><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">&lt;% if(post.toc <span class="hljs-operator">=</span><span class="hljs-operator">=</span> true)&#123; %&gt;<br>    &lt;div id<span class="hljs-operator">=</span><span class="hljs-string">&quot;toc-div&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;toc-article&quot;</span> &lt;% if (post.encrypt <span class="hljs-operator">=</span><span class="hljs-operator">=</span> true) &#123; %&gt;style<span class="hljs-operator">=</span><span class="hljs-string">&quot;display:none&quot;</span> &lt;% &#125; %&gt;&gt;<br>        &lt;strong class<span class="hljs-operator">=</span><span class="hljs-string">&quot;toc-title&quot;</span>&gt;Index&lt;/strong&gt;<br>        &lt;% if (post.encrypt <span class="hljs-operator">=</span><span class="hljs-operator">=</span> true) &#123; %&gt;<br>            &lt;%- toc(post.origin) %&gt;<br>        &lt;% &#125; else &#123; %&gt;<br>            &lt;%- toc(post.content) %&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;/div&gt;<br>&lt;% &#125; %&gt;<br>&lt;%- post.content %&gt;<br></code></pre></td></tr></table></figure><h3 id="修改加密模板"><a href="#修改加密模板" class="headerlink" title="修改加密模板"></a>修改加密模板</h3><ul><li>如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 <em>_config.yml</em> 中。</li></ul><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"># Security</span><br><span class="language-xml">##</span><br><span class="language-xml">encrypt:</span><br><span class="language-xml">    enable: true</span><br><span class="language-xml">    default_abstract: the content has been encrypted, enter the password to read.<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">    default_message: Please enter the password to read.</span><br><span class="language-xml">    default_template:</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hbe-security&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot; </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string"> &quot;</span> /&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pass&quot;</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;encrypt-blog&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="language-xml">                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><p>可以看见，和上面的配置文件对比来看，多了<strong>default_template</strong>和<strong>default_abstract</strong>和<strong>default_message</strong>配置项。</p><ul><li>default_abstract : 这个是指在文章列表页，我们看到的加密文章描述。当然这是对所有加密文章生效的。</li><li>default_message : 这个在文章详情页的密码输入框上方的描述性文字。</li><li>default_template : 这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的<ul><li>开始的解密部分需要由 div 包裹，而且 div 的 id <strong>必须</strong> 是 ‘hbe-security’，解密后以便于隐藏。</li><li>最后的 content 显示 div 的 id <strong>必须</strong> 是 ‘encrypt-blog’，同时为了好看，也希望进行隐藏。</li><li>同时，必须要有一个 input 输入框，id <strong>必须</strong>是”pass”，用来供用户输入密码。</li><li>输入密码之后，务必要有一个触发器，用来调用 ‘decryptAES’ 函数。样例中以 button 来触发。</li></ul></li></ul></li><li><p>如果你希望对某一篇特定的文章做特殊处理， 在博客的源文件添加 template 配置:</p></li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">---</span><br>title: hello world<br><span class="hljs-built_in">date</span>: <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-30</span> <span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">02</span><br>tags:<br>    - fdsfadsfa<br>    - fdsafsdaf<br>password: Mike<br>abstract: Welcome <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> blog, enter password <span class="hljs-keyword">to</span> <span class="hljs-built_in">read</span>.<br>message: Welcome <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> blog, enter password <span class="hljs-keyword">to</span> <span class="hljs-built_in">read</span>.<br>template:<br>        &lt;<span class="hljs-keyword">script</span> src=<span class="hljs-string">&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;&lt;/<span class="hljs-keyword">script</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;hbe-security&quot;</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;input-container&quot;</span>&gt;<br>                &lt;input type=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;pass&quot;</span> placeholder=<span class="hljs-string">&quot; &#123;&#123;message&#125;&#125; &quot;</span> /&gt;<br>                &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;pass&quot;</span>&gt; &#123;&#123;message&#125;&#125; &lt;/label&gt;<br>                &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;bottom-line&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>            &lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;encrypt-blog&quot;</span> style=<span class="hljs-string">&quot;display:none&quot;</span>&gt;<br>            &#123;&#123;content&#125;&#125;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-comment">---</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xsin.gitee.io/2019/01/11/hexo-blog-encrypt/&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/hexo-blog-encrypt&quot;&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="转载" scheme="http://example.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>靶形数独</title>
    <link href="http://example.com/2022/01/20/%E9%9D%B6%E5%BD%A2%E6%95%B0%E7%8B%AC%EF%BC%88dfs%EF%BC%89/"/>
    <id>http://example.com/2022/01/20/%E9%9D%B6%E5%BD%A2%E6%95%B0%E7%8B%AC%EF%BC%88dfs%EF%BC%89/</id>
    <published>2022-01-20T14:43:26.000Z</published>
    <updated>2022-08-09T09:03:00.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定下图靶形数独，每个格子的得分是填入数字*格子分数，总得分是所有格子得分之和。填好使得得分最高，输出得分。</p><p align="center"><src img="image-20220120224607520.png"></src></p>![image-20220120224607520](靶形数独（dfs）/image-20220120224607520.png)<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1.记录每一行0的个数，先填0少的一行</p><p>2.用三维数组记录当前数字是否被所在行、列、九宫格使用过</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">vis[<span class="hljs-number">0</span>][x][v]<span class="hljs-comment">//行号为x,数字为v</span><br>vis[<span class="hljs-number">1</span>][y][v]<span class="hljs-comment">//列号为y,数字为v</span><br>vis[<span class="hljs-number">2</span>][g][v]<span class="hljs-comment">//九宫格号为g,数字为v</span><br></code></pre></td></tr></table></figure><p>3.按照第一步的思想，将每个格子按照优先级排好序，一个个填数。填到第82格的时候，计算得分。选择各种组合中最大得分为答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N][N],ans[N][N],vis[<span class="hljs-number">3</span>][N][N],b[<span class="hljs-number">82</span>],maxn,flag;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Row</span>&#123;<br><span class="hljs-type">int</span> h,zero_cnt;<br>&#125;row[N];<br><span class="hljs-comment">//排序规则:按照行的0的个数从小到大</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Row row1,Row row2)</span></span>&#123;<br><span class="hljs-keyword">return</span> row1.zero_cnt&lt;row2.zero_cnt;<br>&#125;<br><span class="hljs-comment">//获取x，y在哪一个小九宫格子中</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getGrid</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">1</span>&amp;&amp;x&lt;=<span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">4</span>&amp;&amp;y&lt;=<span class="hljs-number">6</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">4</span>&amp;&amp;x&lt;=<span class="hljs-number">6</span>)&#123;<br><span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">4</span>&amp;&amp;y&lt;=<span class="hljs-number">6</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">7</span>&amp;&amp;x&lt;=<span class="hljs-number">9</span>)&#123;<br><span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">1</span>&amp;&amp;y&lt;=<span class="hljs-number">3</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y&gt;=<span class="hljs-number">4</span>&amp;&amp;y&lt;=<span class="hljs-number">6</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br><span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//获取x，y位置对应的分数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getScore</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>||y==<span class="hljs-number">1</span>||x==<span class="hljs-number">9</span>||y==<span class="hljs-number">9</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>||y==<span class="hljs-number">2</span>||x==<span class="hljs-number">8</span>||y==<span class="hljs-number">8</span>)     <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">3</span>||y==<span class="hljs-number">3</span>||x==<span class="hljs-number">7</span>||y==<span class="hljs-number">7</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">4</span>||y==<span class="hljs-number">4</span>||x==<span class="hljs-number">6</span>||y==<span class="hljs-number">6</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">else</span><span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-comment">//计算当前组合按照规则计算出来的结果</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)<br>sum+=ans[i][j]*<span class="hljs-built_in">getScore</span>(i,j);<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> xh)</span></span>&#123;        <span class="hljs-comment">//xh:b数组的序号</span><br><span class="hljs-keyword">if</span>(xh==<span class="hljs-number">82</span>)&#123;<br>flag=<span class="hljs-number">1</span>;<br>maxn=<span class="hljs-built_in">max</span>(maxn,<span class="hljs-built_in">cal</span>());<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> x=b[xh]/<span class="hljs-number">9</span>+<span class="hljs-number">1</span>;    <span class="hljs-comment">//现在这个序号对应的是第x行，第y列</span><br><span class="hljs-type">int</span> y=b[xh]%<span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)<br>x=b[xh]/<span class="hljs-number">9</span>,y=<span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span>(!a[x][y])&#123;       <span class="hljs-comment">//如果当前这个格子是0，才需要填</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;  <span class="hljs-comment">//判断1-9能不能用</span><br><span class="hljs-type">int</span> g=<span class="hljs-built_in">getGrid</span>(x,y);<br><span class="hljs-keyword">if</span>(!vis[<span class="hljs-number">0</span>][x][j]&amp;&amp;!vis[<span class="hljs-number">1</span>][y][j]&amp;&amp;!vis[<span class="hljs-number">2</span>][g][j])&#123;<br>ans[x][y]=j;<br>vis[<span class="hljs-number">0</span>][x][j]=<span class="hljs-number">1</span>,vis[<span class="hljs-number">1</span>][y][j]=<span class="hljs-number">1</span>,vis[<span class="hljs-number">2</span>][g][j]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(xh+<span class="hljs-number">1</span>);<br>vis[<span class="hljs-number">0</span>][x][j]=<span class="hljs-number">0</span>,vis[<span class="hljs-number">1</span>][y][j]=<span class="hljs-number">0</span>,vis[<span class="hljs-number">2</span>][g][j]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br> &#125;<br> <span class="hljs-keyword">else</span><br><span class="hljs-built_in">dfs</span>(xh+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;          <span class="hljs-comment">//cnt:记录该行0的个数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>cin&gt;&gt;a[i][j];<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">0</span>)<br>cnt++;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> v=a[i][j];<br><span class="hljs-type">int</span> g=<span class="hljs-built_in">getGrid</span>(i,j);<br>ans[i][j]=v;       <span class="hljs-comment">//已经填好的数，将它保留，并且行/列/小方格均不可使用</span><br>vis[<span class="hljs-number">0</span>][i][v]=<span class="hljs-number">1</span>,vis[<span class="hljs-number">1</span>][j][v]=<span class="hljs-number">1</span>,vis[<span class="hljs-number">2</span>][g][v]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>row[i].h=i,row[i].zero_cnt=cnt;   <span class="hljs-comment">//记录每一行有几个0</span><br>&#125;<br><span class="hljs-built_in">sort</span>(row+<span class="hljs-number">1</span>,row+<span class="hljs-number">1</span>+<span class="hljs-number">9</span>,cmp);              <span class="hljs-comment">//优先安排0少的行</span><br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br><span class="hljs-type">int</span> x=row[i].h,y=j;<br>num++;<br>b[num]=(x<span class="hljs-number">-1</span>)*<span class="hljs-number">9</span>+y;           <span class="hljs-comment">//存储待搜索格子的优先顺序</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(flag)<br>cout&lt;&lt;maxn&lt;&lt;endl;<br><span class="hljs-keyword">else</span><br>cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h4&gt;&lt;p&gt;给定下图靶形数独，每个格子的得分是填入数字*格子分数，总得分是所有格子得分之和。填好使得得分最高，输出得分。&lt;/p&gt;
&lt;p align=&quot;c</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>请回答,2021</title>
    <link href="http://example.com/2022/01/14/%E8%AF%B7%E5%9B%9E%E7%AD%94,2021/"/>
    <id>http://example.com/2022/01/14/%E8%AF%B7%E5%9B%9E%E7%AD%94,2021/</id>
    <published>2022-01-13T18:13:11.000Z</published>
    <updated>2022-05-09T11:26:53.957Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="40e9295f487dfa26b102ab7d57782b440a704625054b5da148536eb3ac2a3d81"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录贴</title>
    <link href="http://example.com/2022/01/03/leetcode%E5%88%B7%E9%A2%98%E6%80%9D%E8%B7%AF%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/01/03/leetcode%E5%88%B7%E9%A2%98%E6%80%9D%E8%B7%AF%E8%AE%B0%E5%BD%95/</id>
    <published>2022-01-03T11:23:48.000Z</published>
    <updated>2022-05-07T15:28:34.471Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴一篇文章：</p><p>如何通过谷歌技术类实习&#x2F;校招面试？ - 胡津铭的回答 - 知乎 <a href="https://www.zhihu.com/question/360446321/answer/931564041">https://www.zhihu.com/question/360446321/answer/931564041</a></p><p>外企算法题怎么面？首先确认题意如数据类型和范围，然后提出思路，和面试官讨论，不断进行复杂度分析并迭代方法，得到肯定后开始写代码，写代码过程中说出函数传参和返回值、变量含义和每一句的目的，写完之后用它解释测试样例结果，构造特殊样例和边界值并找出bug。</p><h3 id="2022-x2F-1-x2F-13"><a href="#2022-x2F-1-x2F-13" class="headerlink" title="2022&#x2F;1&#x2F;13"></a>2022&#x2F;1&#x2F;13</h3><blockquote><p>分治好哇！! 但啥时候能把递归写对啊orz</p></blockquote><h5 id="1-输入某二叉树的前序遍历和中序遍历的结果，构建该二叉树并返回其根节点。"><a href="#1-输入某二叉树的前序遍历和中序遍历的结果，构建该二叉树并返回其根节点。" class="headerlink" title="1.输入某二叉树的前序遍历和中序遍历的结果，构建该二叉树并返回其根节点。"></a>1.输入某二叉树的前序遍历和中序遍历的结果，构建该二叉树并返回其根节点。</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; preorder;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; myHash;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-type">int</span> root,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left&gt;right)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[root]);<br>        <span class="hljs-type">int</span> i = myHash[preorder[root]];<br>        node-&gt;left = <span class="hljs-built_in">recur</span>(root+<span class="hljs-number">1</span>,left,i<span class="hljs-number">-1</span>);<br>        node-&gt;right = <span class="hljs-built_in">recur</span>(root+<span class="hljs-number">1</span>+i-left,i+<span class="hljs-number">1</span>,right);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>          <span class="hljs-keyword">this</span>-&gt;preorder = preorder;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;inorder.<span class="hljs-built_in">size</span>();i++)&#123;<br>              myHash[inorder[i]]=i;<br>          &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recur</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,inorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2022-x2F-1-x2F-17"><a href="#2022-x2F-1-x2F-17" class="headerlink" title="2022&#x2F;1&#x2F;17"></a>2022&#x2F;1&#x2F;17</h3><p>Update:快乐子,又有刷题的动力了orz。但是今天要好好休息一下我的眼睛，盯太久代码了:-)</p><h3 id="2022-x2F-1-x2F-22"><a href="#2022-x2F-1-x2F-22" class="headerlink" title="2022&#x2F;1&#x2F;22"></a>2022&#x2F;1&#x2F;22</h3><p>dp思想：需要遍历每一个状态，只不过因数据结构的不同而采用不同的遍历方法，二维数组、树等</p><h3 id="2022-x2F-2-x2F-20"><a href="#2022-x2F-2-x2F-20" class="headerlink" title="2022&#x2F;2&#x2F;20"></a>2022&#x2F;2&#x2F;20</h3><p>一把摄像头关掉，就想到优解了。再一次说明，我在有人的场合常常非常失智，缺少急智。这咋改？？好像没啥办法，哭哭哭。</p><p>虽然天赋确实很一般，emmm,无所谓啦，安啦，难道还能做别的？</p><h3 id="2022-x2F-3-x2F-20"><a href="#2022-x2F-3-x2F-20" class="headerlink" title="2022&#x2F;3&#x2F;20"></a>2022&#x2F;3&#x2F;20</h3><p>从一个简单题说起……</p><p><a href="https://leetcode-cn.com/problems/is-unique-lcci/">面试题 01.01. 判定字符是否唯一 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/2022/01/03/leetcode%E5%88%B7%E9%A2%98%E6%80%9D%E8%B7%AF%E8%AE%B0%E5%BD%95/1647682166-hWozOz-image.png" alt="image.png"></p><h3 id="2022-x2F-5-x2F-5"><a href="#2022-x2F-5-x2F-5" class="headerlink" title="2022&#x2F;5&#x2F;5"></a>2022&#x2F;5&#x2F;5</h3><p>如何进行技术面试（面试官视角）</p><p><a href="https://jysperm.me/2022/05/technical-interview-tips/">https://jysperm.me/2022/05/technical-interview-tips/</a></p>]]></content>
    
    
    <summary type="html">开这个帖记录一些不顺手的小题目。嘻嘻~（constantly updating)</summary>
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>实用网站汇总与分享</title>
    <link href="http://example.com/2021/12/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB%E4%B8%8E%E5%88%86%E4%BA%AB/"/>
    <id>http://example.com/2021/12/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB%E4%B8%8E%E5%88%86%E4%BA%AB/</id>
    <published>2021-12-25T19:19:29.000Z</published>
    <updated>2022-08-08T14:05:27.301Z</updated>
    
    <content type="html"><![CDATA[<p>图像创作</p><ul><li><a href="https://www.pinterest.com/">https://www.pinterest.com/</a>    pinterest</li><li><a href="https://www.pixiv.net/">https://www.pixiv.net/</a>  pixiv</li><li><a href="https://www.artstation.com/shal">https://www.artstation.com/shal</a> （艺术家个人）</li><li><a href="https://huaban.com/home/">花瓣，陪你做生活的设计师(家居，美食，时尚，穿搭，设计，商品，美图等) (huaban.com)</a></li></ul><p>音乐</p><ul><li><a href="https://www.mymusicsheet.com/animenzzz?page=1">Animenz Sheet (mymusicsheet.com)</a>  A叔官方钢琴谱（付费）</li></ul><p>书籍</p><ul><li><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com</a> 鸠摩搜书</li><li><a href="https://github.com/programthink/books">https://github.com/programthink/books</a></li><li><a href="https://jp1lib.org/">https://jp1lib.org/</a>   ZLibrary（中文书、外文原著）</li><li><a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a> 脚本之家</li><li><a href="http://libgen.is/">Library Genesis (libgen.is)</a>（英文书籍）</li></ul><p>学习</p><ul><li><a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs (mozilla.org)</a>  Web</li><li><a href="https://codingcompetitions.withgoogle.com/kickstart">https://codingcompetitions.withgoogle.com/kickstart</a>  kickstart</li><li><a href="https://summerofcode.withgoogle.com/">https://summerofcode.withgoogle.com/</a>  gsoc</li></ul><p>其他</p><ul><li><p><a href="https://oskarstalberg.com/Townscaper/#GSB0RARueC6Snc9E0lO5B">https://oskarstalberg.com/Townscaper/#GSB0RARueC6Snc9E0lO5B</a>  建造小镇小游戏</p><p><img src="/2021/12/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB%E4%B8%8E%E5%88%86%E4%BA%AB/12/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB%E4%B8%8E%E5%88%86%E4%BA%AB/image-20211226170615633.png" alt="image-20211226170615633"></p></li></ul>]]></content>
    
    
    <summary type="html">常用的都是娱乐的，学习资源啥的并不常用:-)</summary>
    
    
    
    
    <category term="清单" scheme="http://example.com/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>莉莉丝S3联赛游戏开发记录</title>
    <link href="http://example.com/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-23T08:25:23.000Z</published>
    <updated>2022-06-28T07:46:06.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>队友是在大群里的队友征集表里找的，策划大大来自华师大，他说想做一款类魂RPG。策划案相当不错，不论是系统设计还是动画特效设计都完备且精致，但事实上，最后游戏并没有实现理想的效果，原因在于我们低估了游戏可玩性的实现难度。可能大家都是新手编辑器程序员吧，一不善优化导致非常卡顿，二不知道复杂系统的写法，即“how player processes in the game”,却没有在时间充裕之时就开始着手研究，最后只是将众多元素简单拼接在一起。</p><p>当然了，合作还是很愉快的！五名成员（包括我）都太可爱了！（捂脸逃</p><img src="/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/image-20211223164505539.png" alt="image-20211223164505539" style="zoom:50%;"><img src="/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/image-20211223164845364.png" alt="image-20211223164845364" style="zoom:50%;"><h3 id="前置技能：Lua"><a href="#前置技能：Lua" class="headerlink" title="前置技能：Lua"></a>前置技能：Lua</h3><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><h4 id="Lua特性"><a href="#Lua特性" class="headerlink" title="Lua特性"></a>Lua特性</h4><ul><li><strong>轻量级</strong>: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。</li><li><strong>可扩展</strong>: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</li><li><strong>其它特性</strong><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul></li></ul><h3 id="技能系统"><a href="#技能系统" class="headerlink" title="技能系统"></a>技能系统</h3><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><ul><li>技能分为两大类：物理技能与魔法技能</li><li>默认情况下，主角持剑，按下普通攻击键时进行挥剑攻击</li><li>如果施用了魔法技能，主角武器则切换为法杖</li><li>当主角武器为法杖时，再按下普通攻击键，主角进行远程攻击</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h5><p>Avatar下Bone_R_Hand绑定Mesh1和Mesh2，分别为剑和法杖的模型,Script中逻辑为：按下Tab键则二者visible属性交换。num记录当前哪个武器可见。</p><p>AnimationScript中写了全部的技能，接下来以普通攻击为例进行详解。</p><p><img src="/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/image-20211223225437545.png" alt="image-20211223225437545"></p><h5 id="普通攻击"><a href="#普通攻击" class="headerlink" title="普通攻击"></a>普通攻击</h5><h6 id="导入动画"><a href="#导入动画" class="headerlink" title="导入动画"></a>导入动画</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> anims = &#123;<br>    <span class="hljs-string">&#x27;m_01_idle_stand_01&#x27;</span>,   <br>    <span class="hljs-string">&#x27;m_01_move_walk_forward_loop_01&#x27;</span>,<br>    <span class="hljs-string">&#x27;m_01_move_run_forward_loop_01&#x27;</span><br>&#125;<br><br><span class="hljs-comment">--导入动画资源</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ImportAnimation</span><span class="hljs-params">(_anims, _path)</span></span><br>    <span class="hljs-keyword">for</span> _, animName <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(_anims) <span class="hljs-keyword">do</span><br>        localPlayer.Avatar:ImportAnimation(ResourceManager.GetAnimation(_path .. animName))<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>ImportAnimation(anims, <span class="hljs-string">&#x27;Local/Anim/&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h6><p>有限状态机与混合空间节点</p><p>由于状态具有互斥性，有限状态机的引入保证角色不同时处于两种状态：比如挥剑的同时不能向前移动。但这也导致在播放一个动画的时候播放另一个动画，势必导致人物的动作被打断，动作变得缺少连续性。故采用动画混合并插值的解决方案，引入混合空间节点概念。写法如下</p><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CreateSingle</span><span class="hljs-params">(_animName, _speed)</span></span><br>        <span class="hljs-keyword">local</span> single = localPlayer.Avatar:AddBlendSpaceSingleNode()<br>        single:AddClipSingle(_animName, _speed <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> single<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--创建一维BlendSpaceNode</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Create1D</span><span class="hljs-params">(_animData, _param)</span></span><br>        <span class="hljs-keyword">local</span> blend = localPlayer.Avatar:AddBlendSpace1DNode(_param)<br>        <span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(_animData) <span class="hljs-keyword">do</span><br>                blend:AddClip1D(v[<span class="hljs-number">1</span>], v[<span class="hljs-number">2</span>], v[<span class="hljs-number">3</span>] <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">return</span> blend<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--创建二维BlendSpaceNode</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Create2D</span><span class="hljs-params">(_animData, _param1, _param2)</span></span><br>        <span class="hljs-keyword">local</span> blend = localPlayer.Avatar:AddBlendSpace2DNode(_param1, _param2)<br>        <span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(_animData) <span class="hljs-keyword">do</span><br>                blend:AddClip2D(v[<span class="hljs-number">1</span>], v[<span class="hljs-number">2</span>], v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>] <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">return</span> blend<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--播放BlendSpaceNode</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Play</span><span class="hljs-params">(_animNode, _layer, _weight, _transition, _transitionOut, _interrupt, _loop, _speedScale)</span></span><br>        localPlayer.Avatar:PlayBlendSpaceNode(_animNode, _layer, _weight <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>, _transition <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,  _transitionOut <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>, _interrupt <span class="hljs-keyword">or</span> <span class="hljs-literal">true</span>, _loop, _speedScale <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">local</span> idleBN = CreateSingle(<span class="hljs-string">&#x27;m_01_idle_stand_01&#x27;</span>)<br><br><span class="hljs-keyword">local</span> moveAnimData = <br>&#123;<br>        &#123;<span class="hljs-string">&#x27;m_01_move_walk_forward_loop_01&#x27;</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;m_01_move_run_forward_loop_01&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span>&#125;<br>&#125;<br><span class="hljs-keyword">local</span> moveBN = Create1D(moveAnimData,<span class="hljs-string">&#x27;speedXZ&#x27;</span>)<br><br><span class="hljs-comment">--测试代码 测试完毕后删除</span><br>Input.OnKeyDown:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-keyword">if</span> Input.GetPressKeyData(Enum.KeyCode.Z) == Enum.KeyState.KeyStatePress <span class="hljs-keyword">then</span><br>                Play(idleBN, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">if</span> Input.GetPressKeyData(Enum.KeyCode.X) == Enum.KeyState.KeyStatePress <span class="hljs-keyword">then</span><br>                Play(moveBN, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><h6 id="定义更新火球特效的函数"><a href="#定义更新火球特效的函数" class="headerlink" title="定义更新火球特效的函数"></a>定义更新火球特效的函数</h6><p>持法杖时为远程攻击，则需要这么一个火球特效：在一个时间段内，它能持续向施用时刻角色的正前方运动</p><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> NormalList = &#123;&#125; <br><span class="hljs-keyword">local</span> NormalCnt = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">UpdateNormal</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> i,item <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(NormalList) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> item ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>item.Position = item.Position + item.Dir.Value * <span class="hljs-number">0.18</span><br>item.FlyingTime.Value = item.FlyingTime.Value + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> item.FlyingTime.Value &gt; <span class="hljs-number">300</span> <span class="hljs-keyword">then</span> <br>item:Destroy()<span class="hljs-comment">--一定时间后火球消失</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(NormalList,i)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h6 id="建立攻击状态的状态机"><a href="#建立攻击状态的状态机" class="headerlink" title="建立攻击状态的状态机"></a>建立攻击状态的状态机</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> atk = CreateState(<span class="hljs-string">&#x27;atk&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="核心逻辑之挥剑"><a href="#核心逻辑之挥剑" class="headerlink" title="核心逻辑之挥剑"></a>核心逻辑之挥剑</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">Input.OnKeyDown:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> <br>dir = player.Forward<br>    <span class="hljs-keyword">if</span>(Input.GetPressKeyData(Enum.KeyCode.Mouse0) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> (num.Value == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br> Goto(<span class="hljs-string">&#x27;atk&#x27;</span>)<br>            <span class="hljs-comment">--数值变化</span><br><span class="hljs-comment">--播放动画 </span><br><span class="hljs-keyword">end</span><br>)<br></code></pre></td></tr></table></figure><h6 id="核心逻辑之远程攻击"><a href="#核心逻辑之远程攻击" class="headerlink" title="核心逻辑之远程攻击"></a>核心逻辑之远程攻击</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">elseif</span>(num.Value == <span class="hljs-number">2</span>) <span class="hljs-keyword">then</span><br><span class="hljs-comment">--数值变化</span><br><span class="hljs-comment">--播放动画</span><br>Goto(<span class="hljs-string">&#x27;atk&#x27;</span>)<br><br><span class="hljs-comment">--向火球表中增加火球并定义火球的碰撞</span><br><span class="hljs-keyword">local</span> normal = Workspace:CreateInstance(<span class="hljs-string">&#x27;FX_throwing_fireball_01&#x27;</span>, <span class="hljs-string">&quot;fire&quot;</span> .. NormalCnt, Workspace,player.Position + Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) + dir*<span class="hljs-number">2</span>, EulerDegree(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) <br>normal.Dir.Value = player.Forward<br>normal.Cube.OnCollisionBegin:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(hitObject,hitPoint,hitNormal)</span></span><br><span class="hljs-keyword">if</span> hitObject.ClassName == <span class="hljs-string">&quot;NpcPlayerInstance&quot;</span> <span class="hljs-keyword">and</span> hitObject~= player <span class="hljs-keyword">then</span><br><span class="hljs-comment">--数值变化</span><br>normal:Destroy()<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(NormalList,normal)<br>NormalCnt = NormalCnt + <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h6 id="退出攻击状态"><a href="#退出攻击状态" class="headerlink" title="退出攻击状态"></a>退出攻击状态</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">normalAttackNode1.OnComplete:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--自定义设置 </span><br>    Goto(<span class="hljs-string">&#x27;default&#x27;</span>)<br><span class="hljs-keyword">end</span>)<br>comboatk.OnComplete:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--自定义设置 </span><br>    Goto(<span class="hljs-string">&#x27;default&#x27;</span>)<br><span class="hljs-keyword">end</span>)<br><br></code></pre></td></tr></table></figure><h6 id="调用更新火球的函数"><a href="#调用更新火球的函数" class="headerlink" title="调用更新火球的函数"></a>调用更新火球的函数</h6><p>onRenderStepped是一个信号事件，每个渲染帧触发，仅在客户端生效。自带一个记录该帧时长的参数。</p><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">world.OnRenderStepped:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>UpdateNormal()<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><h3 id="任务系统"><a href="#任务系统" class="headerlink" title="任务系统"></a>任务系统</h3><h4 id="设计构思"><a href="#设计构思" class="headerlink" title="设计构思"></a>设计构思</h4><p>每到新的一天，随机生成一个新的杀敌任务。每当对应NPC种类被击杀，相应计数器加一。这些都动态地显示在UI上。</p><h4 id="文件结构-1"><a href="#文件结构-1" class="headerlink" title="文件结构"></a>文件结构</h4><p>task是一个ModuleScript脚本。使用require和ModuleScript来使用和定义模块。其实就相当于C++里的调用库函数，只不过这个库函数要自己写；Day脚本调用task，生成随机数选择当天触发的任务函数；Script脚本用于接收值改变信号。由于函数入口有两个，故使用invoke,不阻塞第一个函数入口，直接另起一线程，在新线程里调用指定函数，可延迟若干秒后调用</p><p><img src="/2021/12/23/%E8%8E%89%E8%8E%89%E4%B8%9DS3%E8%81%94%E8%B5%9B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/image-20211224015241625.png" alt="image-20211224015241625"></p><h5 id="Day"><a href="#Day" class="headerlink" title="Day"></a>Day</h5><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> value = script.dayCnt.Value <br><span class="hljs-keyword">local</span> obj = script.dayCnt<br><span class="hljs-keyword">local</span> task = <span class="hljs-built_in">require</span>(world.task)<br><br><span class="hljs-keyword">local</span> ran <br><span class="hljs-comment">--wait(2)为测试用。循环中内容应放到天数++语句之后</span><br><span class="hljs-keyword">while</span> wait(<span class="hljs-number">2</span>) <span class="hljs-keyword">do</span><br>ran = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> ran == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>world.taskNumber.Value = <span class="hljs-number">1</span><br>task:eightEnemy()<br><span class="hljs-keyword">elseif</span> ran == <span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br>world.taskNumber.Value = <span class="hljs-number">2</span><br>task:enemyTeam()<br><span class="hljs-keyword">else</span><br>world.taskNumber.Value = <span class="hljs-number">3</span><br>task:eachTypeEnemy()<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="task"><a href="#task" class="headerlink" title="task"></a>task</h5><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> task = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task:eightEnemy</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> cnt = world.enemyDieCount.cnt.Value<br>world.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击败八个敌人(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt)..<span class="hljs-string">&#x27;/8)&#x27;</span><br><span class="hljs-keyword">if</span>(cnt &gt;= <span class="hljs-number">8</span>)<span class="hljs-keyword">then</span><br><span class="hljs-comment">--金币/经验值增加</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task:enemyTeam</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> cnt1 = world.enemyDieCount.cnt1.Value<br><span class="hljs-keyword">local</span> cnt2 = world.enemyDieCount.cnt2.Value<br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击败(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt1)..<span class="hljs-string">&#x27;/1)法师首领\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt2)..<span class="hljs-string">&#x27;/2)法师&#x27;</span> <br><span class="hljs-keyword">if</span>(cnt1 &gt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> cnt2 &gt;=<span class="hljs-number">2</span>)<span class="hljs-keyword">then</span><br><span class="hljs-comment">--金币/经验值增加</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task:eachTypeEnemy</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> cnt3=world.enemyDieCount.cnt3.Value<br><span class="hljs-keyword">local</span> cnt4=world.enemyDieCount.cnt4.Value<br><span class="hljs-keyword">local</span> cnt5=world.enemyDieCount.cnt5.Value <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击杀敌人的侦察兵\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt3)..<span class="hljs-string">&#x27;/1)法师(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt4)..<span class="hljs-string">&#x27;/1)盾卫(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt5)..<span class="hljs-string">&#x27;/1)士兵&#x27;</span><br><span class="hljs-keyword">if</span>(cnt3 &gt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> cnt4 &gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> cnt5 &gt;= <span class="hljs-number">1</span>)<span class="hljs-keyword">then</span><br><span class="hljs-comment">--金币/经验值增加</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> task<br></code></pre></td></tr></table></figure><h5 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h5><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> obj = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj&#x27;</span>, world)<br><span class="hljs-keyword">local</span> obj1 = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj1&#x27;</span>, world)<br><span class="hljs-keyword">local</span> obj2 = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj2&#x27;</span>, world)<br><span class="hljs-keyword">local</span> obj3 = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj3&#x27;</span>, world)<br><span class="hljs-keyword">local</span> obj4 = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj4&#x27;</span>, world)<br><span class="hljs-keyword">local</span> obj5 = world:CreateObject(<span class="hljs-string">&#x27;ObjRefValueObject&#x27;</span>, <span class="hljs-string">&#x27;Obj5&#x27;</span>, world)<br>obj.Value = world.enemyDieCount.cnt<br>obj1.Value = world.enemyDieCount.cnt1<br>obj2.Value = world.enemyDieCount.cnt2<br>obj3.Value = world.enemyDieCount.cnt3<br>obj4.Value = world.enemyDieCount.cnt4<br>obj5.Value = world.enemyDieCount.cnt5<br><br>invoke(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>obj.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt = world.enemyDieCount.cnt.Value<br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">1</span>)<span class="hljs-keyword">then</span> <br>world.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击败八个敌人(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt)..<span class="hljs-string">&#x27;/8)&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br>obj1.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt1 = world.enemyDieCount.cnt1.Value<br><span class="hljs-keyword">local</span> cnt2 = world.enemyDieCount.cnt2.Value<br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">2</span>)<span class="hljs-keyword">then</span> <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击败(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt1)..<span class="hljs-string">&#x27;/1)法师首领\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt2)..<span class="hljs-string">&#x27;/2)法师&#x27;</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br>obj2.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt1 = world.enemyDieCount.cnt1.Value<br><span class="hljs-keyword">local</span> cnt2 = world.enemyDieCount.cnt2.Value<br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">2</span>)<span class="hljs-keyword">then</span> <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击败(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt1)..<span class="hljs-string">&#x27;/1)法师首领\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt2)..<span class="hljs-string">&#x27;/2)法师&#x27;</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br>obj3.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt3 = world.enemyDieCount.cnt3.Value<br><span class="hljs-keyword">local</span> cnt4 = world.enemyDieCount.cnt4.Value<br><span class="hljs-keyword">local</span> cnt5 = world.enemyDieCount.cnt5.Value <br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">3</span>)<span class="hljs-keyword">then</span> <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击杀敌人的侦察兵\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt3)..<span class="hljs-string">&#x27;/1)法师(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt4)..<span class="hljs-string">&#x27;/1)盾卫(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt5)..<span class="hljs-string">&#x27;/1)士兵&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br>obj4.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt3 = world.enemyDieCount.cnt3.Value<br><span class="hljs-keyword">local</span> cnt4 = world.enemyDieCount.cnt4.Value<br><span class="hljs-keyword">local</span> cnt5 = world.enemyDieCount.cnt5.Value <br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">3</span>)<span class="hljs-keyword">then</span> <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击杀敌人的侦察兵\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt3)..<span class="hljs-string">&#x27;/1)法师(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt4)..<span class="hljs-string">&#x27;/1)盾卫(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt5)..<span class="hljs-string">&#x27;/1)士兵&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br>obj5.Value.OnValueChanged:Connect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(oldValue,newValue)</span></span><br><span class="hljs-keyword">local</span> cnt3 = world.enemyDieCount.cnt3.Value<br><span class="hljs-keyword">local</span> cnt4 = world.enemyDieCount.cnt4.Value<br><span class="hljs-keyword">local</span> cnt5 = world.enemyDieCount.cnt5.Value <br><span class="hljs-keyword">if</span>(taskNumber.Value == <span class="hljs-number">3</span>)<span class="hljs-keyword">then</span> <br>script.Parent.ScreenGUI.Figure.Button.changableText.Text = <span class="hljs-string">&#x27;击杀敌人的侦察兵\n(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt3)..<span class="hljs-string">&#x27;/1)法师(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt4)..<span class="hljs-string">&#x27;/1)盾卫(&#x27;</span>..<span class="hljs-built_in">tostring</span>(cnt5)..<span class="hljs-string">&#x27;/1)士兵&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-comment">--测试用，最终smap中，敌人脚本里，每当一个敌人死亡，进行一个enermyDieCount.cnt.Value或者obj.Value.Value的加1（</span><br><span class="hljs-comment">--同理，某种类型的敌人死亡，进行一个enermyDieCount.cnt1（2，3，4……）.Value或者obj1.Value.Value的加1</span><br><span class="hljs-keyword">while</span> wait(<span class="hljs-number">2</span>) <span class="hljs-keyword">do</span><br>obj5.Value.Value = obj5.Value.Value+<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>很显然，重复的语句太多了，代码显得繁琐。这就怪我不会面向对象了……</p><p><a href="https://www.runoob.com/lua/lua-object-oriented.html">甩个链接</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>敢说精通C++这种话吗？这辈子都不敢。</p>]]></content>
    
    
    <summary type="html">有人将电子游戏称为“第九艺术”，作为一个爱玩游戏也喜欢唱唱跳跳写写画画的小盆友，我当然是认同这一说法的！今年11月有幸参加了莉莉丝举办的游戏制作比赛，我担任程序员，负责了项目中主角的技能系统以及任务系统的开发。</summary>
    
    
    
    
    <category term="游戏" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Lua" scheme="http://example.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>故乡</title>
    <link href="http://example.com/2021/12/22/%E6%95%85%E4%B9%A1/"/>
    <id>http://example.com/2021/12/22/%E6%95%85%E4%B9%A1/</id>
    <published>2021-12-22T10:03:39.000Z</published>
    <updated>2021-12-23T03:28:03.767Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1895330088&auto=1&height=66"></iframe><p>我原以为故乡远去了，原本热闹的小城，只剩下寂静的白天与黑暗的夜，不论歌舞还是灯光都不复存在。</p><p>但当我回到故乡，熟悉的一幕幕又出现在眼前：五光十色的沿街店铺、热闹饭馆里笑谈的人们、骑自行车狂飙的少年、路边车库里的架子鼓乐队……</p><p>原来，是我装起所有青涩的记忆远去了，故乡便成了一具空壳。</p><blockquote><p>什么是完整的睡眠</p><p>清醒的黑夜 在撕碎 梦一片片</p><p>    睁开眼犹豫的指尖  </p>    <p>该不该挽留 让你陪在身边</p><p>来时路的终点 是和你遇见</p><p>唯有你让那誓言 漫过时间</p><p>痛到失去了语言</p><p>我 心里却非苦似甜</p><p>依旧是倔强的少年</p><p>我要张开我怀抱 变成你城堡</p><p>只有你是我的 解药</p><p>让我为你画一幅画 用我全部生命做沙</p><p>倾注所有情绪也罢 画出属于我们的家</p><p>那些幽暗过去在下着雨</p><p>想念你的情绪害怕失去</p><p>乘着光和勇气再踏着雨</p><p>用尽所有生命在画着你</p><p>我 心如四海 放眼望去 那些高楼全部坍塌</p><p>你也 从不后悔 哪怕剩下背影 也要在我身旁安家</p><p>唯一解药被你得到</p><p>永远等候你的怀抱</p><p>做你生命中的依靠</p><p>漫漫人生路上最需要</p><p>来时路的终点 是和你遇见</p><p>我们和从前挥别 就在今天</p><p>当你握住我的手</p><p>我拥有一整个宇宙</p><p>而你是星光照亮我</p><p>我要张开我怀抱 变成你城堡</p><p>只有你是我的 解药</p></blockquote>]]></content>
    
    
    <summary type="html">回家了</summary>
    
    
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的博客生活</title>
    <link href="http://example.com/2021/12/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%B4%BB/"/>
    <id>http://example.com/2021/12/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%B4%BB/</id>
    <published>2021-12-17T15:42:29.000Z</published>
    <updated>2022-05-09T13:12:25.502Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/12/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%B4%BB/first.jpg" alt="first"></p><p>在<a href="https://hexo.io/themes">Hexo主题</a>中发现了[<a href="https://www.randomyang.top/"> RandomYang ]</a>大佬的Paper主题，一下子被这个简洁而独特的设计吸引了</p><p>后来发现相比于一些十分流行的主题，Paper配置的选择可能没有那么多。如果想阅览更详尽的配置选项，可以去看诸如NexT、Stun(安利，这是我同样非常喜欢的主题！)的文档，找些灵感，然后就可以把想要的模块加在自己的博客里啦！（Of course，全靠DIY）</p><p>可能对于前端小白来说这样的DIY确实不太友好。但实在是太喜欢这个主题了，于是乎开开心心地把前端知识学起来！</p><p>第一步从评论系统下手。</p><h3 id="更改评论系统"><a href="#更改评论系统" class="headerlink" title="更改评论系统"></a>更改评论系统</h3><blockquote>    <p>        主题默认使用valine评论系统，但由于valine无后端，不能实现评论的存储、增删等等，所以我选择将它换成带后端的waline    </p></blockquote><p>按照waline官方文档一步步来配置，却在HTML引入（客户端）这一步遇到了问题。首先是需要将它中给出的.html文件引入主题文件夹，而paper的主题文件夹中以.pug文件为主。其次我并不知道这个文件应该放在哪里。</p><p>我想到，paper配置提示要安装 stylus 和 pug 转换工具，那么我一定需要将这个.html文件转换成.pug文件。在搜索引擎上找了一个在线的转换工具，成功！</p><p>然后就去找这个文件到底应该放在哪。打开一个名叫comments-script.pug的文件，发现里面和我转换得到的文件内容很像，只不过是’waline’和’valine’的区别，就是这了！</p><blockquote>    <p>    el 选项是 Waline 渲染使用的元素，你可以设置一个字符串形式的 CSS 选择器或者一个 HTMLElement 对象。</p></blockquote><p>如果按照官网的描述将el值更改为waline,出现了一个问题：评论框的确是如愿出现了，但它出现在首页和每篇文章的顶部。我意识到原作者的el值comments一定经过了某些特殊的设置，料想它在”文章“相关文件中。又去找了找，果然！将这里的comments修改为waline，成功！</p><p>后来想想</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">vscode的全局搜索是个好东西 =）<br></code></pre></td></tr></table></figure><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>编辑好文章后打开本地服务器看看效果，发现作者展示的字体并未出现。主题_config.yml文件中确实有字体相关的链接，但似乎并不是作者博客中的效果？悄咪咪打开作者页面源码，发现带font的标签中一个神秘的链接，把它加在_config.yml文件里，再一刷新，好看的字体出现了！吹爆！</p><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><ul><li><input checked disabled type="checkbox"> 添加格言行</li><li><input disabled type="checkbox"> 更改Archives下的视图效果，略去概要，缩小标题，使其看起来更加扁平</li><li><input disabled type="checkbox"> 全局搜索</li><li><input disabled type="checkbox"> 增加About导航菜单</li><li><input disabled type="checkbox"> 完善第三方支持的配置</li><li><input disabled type="checkbox"> 设置文章链接</li><li><input checked disabled type="checkbox"> 缩小文章标题大小（_post.styl-&gt; &amp;__title-&gt;text-size-&gt;从var.styl中查表）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>各种操作方法还挺dirty的，不够优雅，毕竟知识太少了</p><p>就如同没学数据结构和算法之前，写一些繁琐的oj题目，方法非常之”野”，并且代码不忍卒读</p><p>就……慢慢学习和积累吧</p><p>have fun!</p>]]></content>
    
    
    <summary type="html">很早就想搭建自己的博客了，但还在打新手村的我觉得这件事不太容易。出村后突然发现：天啦，简单！</summary>
    
    
    
    
    <category term="设计" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
